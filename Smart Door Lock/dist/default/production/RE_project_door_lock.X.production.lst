

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 21 10:42:18 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _EEADR	set	4009
    25  0000                     _EEADRH	set	4010
    26  0000                     _EECON1bits	set	4006
    27  0000                     _EECON2	set	4007
    28  0000                     _EEDATA	set	4008
    29  0000                     _OSCCON	set	4051
    30  0000                     _PORTD	set	3971
    31  0000                     _PORTDbits	set	3971
    32  0000                     _RCREG	set	4014
    33  0000                     _SPBRG	set	4015
    34  0000                     _TRISD	set	3989
    35  0000                     _TXREG	set	4013
    36  0000                     _BRG16	set	32195
    37  0000                     _BRGH	set	32098
    38  0000                     _CFGS	set	32054
    39  0000                     _CREN	set	32092
    40  0000                     _EEPGD	set	32055
    41  0000                     _GIE	set	32663
    42  0000                     _IPEN	set	32391
    43  0000                     _LATB0	set	31824
    44  0000                     _LATB1	set	31825
    45  0000                     _LATB2	set	31826
    46  0000                     _PEIE	set	32662
    47  0000                     _RCIE	set	31981
    48  0000                     _RCIF	set	31989
    49  0000                     _SPEN	set	32095
    50  0000                     _SYNC	set	32100
    51  0000                     _TRISB0	set	31896
    52  0000                     _TRISB1	set	31897
    53  0000                     _TRISB2	set	31898
    54  0000                     _TRMT	set	32097
    55  0000                     _TX9	set	32102
    56  0000                     _TXEN	set	32101
    57  0000                     _TXIE	set	31980
    58  0000                     _TXIF	set	31988
    59  0000                     _WREN	set	32050
    60                           
    61                           	psect	smallconst
    62  001000                     __psmallconst:
    63                           	opt stack 0
    64  001000  00                 	db	0
    65  001001                     STR_3:
    66  001001  63                 	db	99	;'c'
    67  001002  68                 	db	104	;'h'
    68  001003  61                 	db	97	;'a'
    69  001004  6E                 	db	110	;'n'
    70  001005  67                 	db	103	;'g'
    71  001006  65                 	db	101	;'e'
    72  001007  20                 	db	32
    73  001008  70                 	db	112	;'p'
    74  001009  61                 	db	97	;'a'
    75  00100A  73                 	db	115	;'s'
    76  00100B  73                 	db	115	;'s'
    77  00100C  20                 	db	32
    78  00100D  20                 	db	32
    79  00100E  20                 	db	32
    80  00100F  20                 	db	32
    81  001010  31                 	db	49	;'1'
    82  001011  00                 	db	0
    83  001012                     STR_4:
    84  001012  72                 	db	114	;'r'
    85  001013  65                 	db	101	;'e'
    86  001014  74                 	db	116	;'t'
    87  001015  75                 	db	117	;'u'
    88  001016  72                 	db	114	;'r'
    89  001017  6E                 	db	110	;'n'
    90  001018  20                 	db	32
    91  001019  20                 	db	32
    92  00101A  20                 	db	32
    93  00101B  20                 	db	32
    94  00101C  20                 	db	32
    95  00101D  20                 	db	32
    96  00101E  20                 	db	32
    97  00101F  20                 	db	32
    98  001020  20                 	db	32
    99  001021  32                 	db	50	;'2'
   100  001022  00                 	db	0
   101  001023                     STR_2:
   102  001023  45                 	db	69	;'E'
   103  001024  4E                 	db	78	;'N'
   104  001025  54                 	db	84	;'T'
   105  001026  45                 	db	69	;'E'
   106  001027  52                 	db	82	;'R'
   107  001028  20                 	db	32
   108  001029  50                 	db	80	;'P'
   109  00102A  41                 	db	65	;'A'
   110  00102B  53                 	db	83	;'S'
   111  00102C  53                 	db	83	;'S'
   112  00102D  57                 	db	87	;'W'
   113  00102E  4F                 	db	79	;'O'
   114  00102F  52                 	db	82	;'R'
   115  001030  44                 	db	68	;'D'
   116  001031  00                 	db	0
   117  001032                     STR_5:
   118  001032  45                 	db	69	;'E'
   119  001033  4E                 	db	78	;'N'
   120  001034  54                 	db	84	;'T'
   121  001035  45                 	db	69	;'E'
   122  001036  52                 	db	82	;'R'
   123  001037  20                 	db	32
   124  001038  4F                 	db	79	;'O'
   125  001039  4C                 	db	76	;'L'
   126  00103A  44                 	db	68	;'D'
   127  00103B  20                 	db	32
   128  00103C  50                 	db	80	;'P'
   129  00103D  41                 	db	65	;'A'
   130  00103E  53                 	db	83	;'S'
   131  00103F  53                 	db	83	;'S'
   132  001040  00                 	db	0
   133  001041                     STR_6:
   134  001041  45                 	db	69	;'E'
   135  001042  4E                 	db	78	;'N'
   136  001043  54                 	db	84	;'T'
   137  001044  45                 	db	69	;'E'
   138  001045  52                 	db	82	;'R'
   139  001046  20                 	db	32
   140  001047  4E                 	db	78	;'N'
   141  001048  45                 	db	69	;'E'
   142  001049  57                 	db	87	;'W'
   143  00104A  20                 	db	32
   144  00104B  50                 	db	80	;'P'
   145  00104C  41                 	db	65	;'A'
   146  00104D  53                 	db	83	;'S'
   147  00104E  53                 	db	83	;'S'
   148  00104F  00                 	db	0
   149  001050                     STR_12:
   150  001050  52                 	db	82	;'R'
   151  001051  45                 	db	69	;'E'
   152  001052  5F                 	db	95	;'_'
   153  001053  45                 	db	69	;'E'
   154  001054  4E                 	db	78	;'N'
   155  001055  54                 	db	84	;'T'
   156  001056  45                 	db	69	;'E'
   157  001057  52                 	db	82	;'R'
   158  001058  20                 	db	32
   159  001059  50                 	db	80	;'P'
   160  00105A  41                 	db	65	;'A'
   161  00105B  53                 	db	83	;'S'
   162  00105C  53                 	db	83	;'S'
   163  00105D  00                 	db	0
   164  00105E                     STR_9:
   165  00105E  77                 	db	119	;'w'
   166  00105F  65                 	db	101	;'e'
   167  001060  6C                 	db	108	;'l'
   168  001061  63                 	db	99	;'c'
   169  001062  6F                 	db	111	;'o'
   170  001063  6D                 	db	109	;'m'
   171  001064  65                 	db	101	;'e'
   172  001065  2C                 	db	44
   173  001066  68                 	db	104	;'h'
   174  001067  65                 	db	101	;'e'
   175  001068  62                 	db	98	;'b'
   176  001069  61                 	db	97	;'a'
   177  00106A  00                 	db	0
   178  00106B                     STR_1:
   179  00106B  68                 	db	104	;'h'
   180  00106C  65                 	db	101	;'e'
   181  00106D  6C                 	db	108	;'l'
   182  00106E  6C                 	db	108	;'l'
   183  00106F  6F                 	db	111	;'o'
   184  001070  20                 	db	32
   185  001071  68                 	db	104	;'h'
   186  001072  65                 	db	101	;'e'
   187  001073  62                 	db	98	;'b'
   188  001074  61                 	db	97	;'a'
   189  001075  00                 	db	0
   190  001076                     STR_10:
   191  001076  57                 	db	87	;'W'
   192  001077  52                 	db	82	;'R'
   193  001078  4F                 	db	79	;'O'
   194  001079  4E                 	db	78	;'N'
   195  00107A  47                 	db	71	;'G'
   196  00107B  00                 	db	0
   197  00107C                     STR_8:
   198  00107C  77                 	db	119	;'w'
   199  00107D  72                 	db	114	;'r'
   200  00107E  6F                 	db	111	;'o'
   201  00107F  6E                 	db	110	;'n'
   202  001080  67                 	db	103	;'g'
   203  001081  00                 	db	0
   204  001082                     STR_7:
   205  001082  44                 	db	68	;'D'
   206  001083  4F                 	db	79	;'O'
   207  001084  4E                 	db	78	;'N'
   208  001085  45                 	db	69	;'E'
   209  001086  00                 	db	0
   210  0000                     
   211                           ; #config settings
   212  001087  00                 	db	0	; dummy byte at the end
   213  0000                     
   214                           	psect	cinit
   215  00189C                     __pcinit:
   216                           	opt stack 0
   217  00189C                     start_initialization:
   218                           	opt stack 0
   219  00189C                     __initialization:
   220                           	opt stack 0
   221                           
   222                           ; Clear objects allocated to COMRAM (16 bytes)
   223  00189C  EE00  F02A         	lfsr	0,__pbssCOMRAM
   224  0018A0  0E10               	movlw	16
   225  0018A2                     clear_0:
   226  0018A2  6AEE               	clrf	postinc0,c
   227  0018A4  06E8               	decf	wreg,f,c
   228  0018A6  E1FD               	bnz	clear_0
   229  0018A8                     end_of_initialization:
   230                           	opt stack 0
   231  0018A8                     __end_of__initialization:
   232                           	opt stack 0
   233  0018A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   234  0018AA  6EF8               	movwf	tblptru,c
   235  0018AC  0100               	movlb	0
   236  0018AE  EF44  F008         	goto	_main	;jump to C main() function
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssCOMRAM
   242  00002A                     __pbssCOMRAM:
   243                           	opt stack 0
   244  00002A                     _out:
   245                           	opt stack 0
   246  00002A                     	ds	16
   247                           tblptru	equ	0xFF8
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	cstackCOMRAM
   252  000001                     __pcstackCOMRAM:
   253                           	opt stack 0
   254  000001                     ?_sprintf:
   255                           	opt stack 0
   256  000001                     ?_strcmp:
   257                           	opt stack 0
   258  000001                     EEPROM_write@address:
   259                           	opt stack 0
   260  000001                     EEPROM_read@address:
   261                           	opt stack 0
   262  000001                     LCDWriteNibble@rs:
   263                           	opt stack 0
   264  000001                     UART_initi@BR:
   265                           	opt stack 0
   266  000001                     sprintf@sp:
   267                           	opt stack 0
   268  000001                     strcmp@s1:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  000001                     	ds	1
   273  000002                     EEPROM_write@data:
   274                           	opt stack 0
   275  000002                     LCDWriteNibble@ch:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x1
   279  000002                     	ds	1
   280  000003                     ??_LCDPutCmd:
   281  000003                     ??_LCDPutChar:
   282  000003                     ??_UART_initi:
   283  000003                     sprintf@f:
   284                           	opt stack 0
   285  000003                     strcmp@s2:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x2
   289  000003                     	ds	1
   290  000004                     LCDPutChar@ch:
   291                           	opt stack 0
   292  000004                     LCDPutCmd@ch:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x3
   296  000004                     	ds	1
   297  000005                     ??_strcmp:
   298  000005                     ??_LCD_Initialize:
   299  000005                     LCDGoto@ln:
   300                           	opt stack 0
   301  000005                     LCDPutStr@str:
   302                           	opt stack 0
   303  000005                     sprintf@ap:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x4
   307  000005                     	ds	1
   308  000006                     ??_LCDGoto:
   309  000006                     strcmp@r:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x5
   313  000006                     	ds	1
   314  000007                     LCDPutStr@i:
   315                           	opt stack 0
   316  000007                     sprintf@c:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x6
   320  000007                     	ds	1
   321  000008                     _LCDGoto$165:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x7
   325  000008                     	ds	2
   326  00000A                     LCDGoto@pos:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x9
   330  00000A                     	ds	1
   331  00000B                     ??_main:
   332                           
   333                           ; 0 bytes @ 0xA
   334  00000B                     	ds	1
   335  00000C                     main@c:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xB
   339  00000C                     	ds	1
   340  00000D                     main@j:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0xC
   344  00000D                     	ds	2
   345  00000F                     main@j_251:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0xE
   349  00000F                     	ds	2
   350  000011                     main@j_254:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x10
   354  000011                     	ds	2
   355  000013                     main@j_256:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x12
   359  000013                     	ds	2
   360  000015                     main@j_258:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x14
   364  000015                     	ds	2
   365  000017                     main@str:
   366                           	opt stack 0
   367                           
   368                           ; 5 bytes @ 0x16
   369  000017                     	ds	5
   370  00001C                     main@x:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x1B
   374  00001C                     	ds	1
   375  00001D                     main@pass:
   376                           	opt stack 0
   377                           
   378                           ; 5 bytes @ 0x1C
   379  00001D                     	ds	5
   380  000022                     main@i:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x21
   384  000022                     	ds	2
   385  000024                     main@i_247:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x23
   389  000024                     	ds	2
   390  000026                     main@i_249:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x25
   394  000026                     	ds	2
   395  000028                     main@i_260:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x27
   399  000028                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           
   404 ;;
   405 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   406 ;;
   407 ;; *************** function _main *****************
   408 ;; Defined at:
   409 ;;		line 21 in file "RE-door lock.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;  j               2   14[COMRAM] int 
   414 ;;  i               2   37[COMRAM] int 
   415 ;;  i               2   35[COMRAM] int 
   416 ;;  j               2   18[COMRAM] int 
   417 ;;  i               2   39[COMRAM] int 
   418 ;;  j               2   20[COMRAM] int 
   419 ;;  j               2   16[COMRAM] int 
   420 ;;  i               2   33[COMRAM] int 
   421 ;;  j               2   12[COMRAM] int 
   422 ;;  pass            5   28[COMRAM] unsigned char [5]
   423 ;;  str             5   22[COMRAM] unsigned char [5]
   424 ;;  x               1   27[COMRAM] unsigned char 
   425 ;;  c               1   11[COMRAM] unsigned char 
   426 ;; Return value:  Size  Location     Type
   427 ;;		None               void
   428 ;; Registers used:
   429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;Total ram usage:       31 bytes
   440 ;; Hardware stack levels required when called:    3
   441 ;; This function calls:
   442 ;;		_EEPROM_read
   443 ;;		_EEPROM_write
   444 ;;		_LCDGoto
   445 ;;		_LCDPutCmd
   446 ;;		_LCDPutStr
   447 ;;		_LCD_Initialize
   448 ;;		_UART_initi
   449 ;;		_UART_read_ch
   450 ;;		_sprintf
   451 ;;		_strcmp
   452 ;; This function is called by:
   453 ;;		Startup code after reset
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text0
   458  001088                     __ptext0:
   459                           	opt stack 0
   460  001088                     _main:
   461                           	opt stack 28
   462                           
   463                           ;RE-door lock.c: 23: char x = 0, c = 0;
   464                           
   465                           ;incstack = 0
   466  001088  0E00               	movlw	0
   467  00108A  6E1C               	movwf	main@x,c
   468  00108C  0E00               	movlw	0
   469  00108E  6E0C               	movwf	main@c,c
   470                           
   471                           ;RE-door lock.c: 24: char str[5];
   472                           ;RE-door lock.c: 25: char pass[5];
   473                           ;RE-door lock.c: 27: OSCCON = 0X76;
   474  001090  0E76               	movlw	118
   475  001092  6ED3               	movwf	4051,c	;volatile
   476                           
   477                           ;RE-door lock.c: 29: LCD_Initialize();
   478  001094  ECA9  F00B         	call	_LCD_Initialize	;wreg free
   479                           
   480                           ;RE-door lock.c: 30: UART_initi(9600);
   481  001098  0E25               	movlw	37
   482  00109A  6E02               	movwf	UART_initi@BR+1,c
   483  00109C  0E80               	movlw	128
   484  00109E  6E01               	movwf	UART_initi@BR,c
   485  0010A0  ECF5  F00A         	call	_UART_initi	;wreg free
   486                           
   487                           ;RE-door lock.c: 32: TRISB0 = 0;
   488  0010A4  9093               	bcf	3987,0,c	;volatile
   489                           
   490                           ;RE-door lock.c: 33: LATB0 = 0;
   491  0010A6  908A               	bcf	3978,0,c	;volatile
   492                           
   493                           ;RE-door lock.c: 34: TRISB1 = 0;
   494  0010A8  9293               	bcf	3987,1,c	;volatile
   495                           
   496                           ;RE-door lock.c: 35: LATB1 = 0;
   497  0010AA  928A               	bcf	3978,1,c	;volatile
   498                           
   499                           ;RE-door lock.c: 36: TRISB2 = 0;
   500  0010AC  9493               	bcf	3987,2,c	;volatile
   501                           
   502                           ;RE-door lock.c: 37: LATB2 = 0;
   503  0010AE  948A               	bcf	3978,2,c	;volatile
   504                           
   505                           ;RE-door lock.c: 39: EEPROM_write('2', 0x01);
   506  0010B0  0E01               	movlw	1
   507  0010B2  6E01               	movwf	EEPROM_write@address,c
   508  0010B4  0E32               	movlw	50
   509  0010B6  EC2B  F00C         	call	_EEPROM_write
   510                           
   511                           ;RE-door lock.c: 40: EEPROM_write('3', 0x02);
   512  0010BA  0E02               	movlw	2
   513  0010BC  6E01               	movwf	EEPROM_write@address,c
   514  0010BE  0E33               	movlw	51
   515  0010C0  EC2B  F00C         	call	_EEPROM_write
   516                           
   517                           ;RE-door lock.c: 41: EEPROM_write('2', 0x03);
   518  0010C4  0E03               	movlw	3
   519  0010C6  6E01               	movwf	EEPROM_write@address,c
   520  0010C8  0E32               	movlw	50
   521  0010CA  EC2B  F00C         	call	_EEPROM_write
   522                           
   523                           ;RE-door lock.c: 42: EEPROM_write('3', 0x04);
   524  0010CE  0E04               	movlw	4
   525  0010D0  6E01               	movwf	EEPROM_write@address,c
   526  0010D2  0E33               	movlw	51
   527  0010D4  EC2B  F00C         	call	_EEPROM_write
   528                           
   529                           ;RE-door lock.c: 44: pass[0] = EEPROM_read(0x01);
   530  0010D8  0E01               	movlw	1
   531  0010DA  EC41  F00C         	call	_EEPROM_read
   532  0010DE  6E1D               	movwf	main@pass,c
   533                           
   534                           ;RE-door lock.c: 45: pass[1] = EEPROM_read(0x02);
   535  0010E0  0E02               	movlw	2
   536  0010E2  EC41  F00C         	call	_EEPROM_read
   537  0010E6  6E1E               	movwf	main@pass+1,c
   538                           
   539                           ;RE-door lock.c: 46: pass[2] = EEPROM_read(0x03);
   540  0010E8  0E03               	movlw	3
   541  0010EA  EC41  F00C         	call	_EEPROM_read
   542  0010EE  6E1F               	movwf	main@pass+2,c
   543                           
   544                           ;RE-door lock.c: 47: pass[3] = EEPROM_read(0x04);
   545  0010F0  0E04               	movlw	4
   546  0010F2  EC41  F00C         	call	_EEPROM_read
   547  0010F6  6E20               	movwf	main@pass+3,c
   548                           
   549                           ;RE-door lock.c: 48: pass[4] = 0;
   550  0010F8  0E00               	movlw	0
   551  0010FA  6E21               	movwf	main@pass+4,c
   552                           
   553                           ;RE-door lock.c: 50: LCDPutCmd(0x01);
   554  0010FC  0E01               	movlw	1
   555  0010FE  ECC6  F00B         	call	_LCDPutCmd
   556                           
   557                           ;RE-door lock.c: 51: LCDGoto(3, 0);
   558  001102  0E00               	movlw	0
   559  001104  6E05               	movwf	LCDGoto@ln,c
   560  001106  0E03               	movlw	3
   561  001108  EC88  F00B         	call	_LCDGoto
   562                           
   563                           ;RE-door lock.c: 52: sprintf(out, "hello heba");
   564  00110C  0E2A               	movlw	low _out
   565  00110E  6E01               	movwf	sprintf@sp,c
   566  001110  0E00               	movlw	high _out
   567  001112  6E02               	movwf	sprintf@sp+1,c
   568  001114  0E6B               	movlw	low STR_1
   569  001116  6E03               	movwf	sprintf@f,c
   570  001118  0E10               	movlw	high STR_1
   571  00111A  6E04               	movwf	sprintf@f+1,c
   572  00111C  EC66  F00B         	call	_sprintf	;wreg free
   573                           
   574                           ;RE-door lock.c: 53: LCDPutStr(out);
   575  001120  0E2A               	movlw	low _out
   576  001122  6E05               	movwf	LCDPutStr@str,c
   577  001124  0E00               	movlw	high _out
   578  001126  6E06               	movwf	LCDPutStr@str+1,c
   579  001128  ECE3  F00B         	call	_LCDPutStr	;wreg free
   580                           
   581                           ;RE-door lock.c: 54: for (int j = 0; j < 30; j++)
   582  00112C  0E00               	movlw	0
   583  00112E  6E0E               	movwf	main@j+1,c
   584  001130  0E00               	movlw	0
   585  001132  6E0D               	movwf	main@j,c
   586  001134                     l1503:
   587  001134  BE0E               	btfsc	main@j+1,7,c
   588  001136  D008               	goto	l1507
   589  001138  500E               	movf	main@j+1,w,c
   590  00113A  E111               	bnz	l1511
   591  00113C  0E1E               	movlw	30
   592  00113E  5C0D               	subwf	main@j,w,c
   593  001140  B0D8               	btfsc	status,0,c
   594  001142  D00D               	goto	l1511
   595  001144  D001               	goto	l1507
   596  001146  D00B               	goto	l1511
   597  001148                     l1507:
   598                           
   599                           ;RE-door lock.c: 55: _delay((unsigned long)((50)*(8e6/4000.0)));
   600  001148  0E82               	movlw	130
   601  00114A  6E0B               	movwf	??_main& (0+255),c
   602  00114C  0EDE               	movlw	222
   603  00114E                     u707:
   604  00114E  2EE8               	decfsz	wreg,f,c
   605  001150  D7FE               	goto	u707
   606  001152  2E0B               	decfsz	??_main& (0+255),f,c
   607  001154  D7FC               	goto	u707
   608  001156  4A0D               	infsnz	main@j,f,c
   609  001158  2A0E               	incf	main@j+1,f,c
   610  00115A  D7EC               	goto	l1503
   611                           
   612                           ;RE-door lock.c: 57: while (1) {
   613  00115C  D000               	goto	l1511
   614  00115E                     l1511:
   615                           
   616                           ;RE-door lock.c: 60: LCDPutCmd(0x01);
   617  00115E  0E01               	movlw	1
   618  001160  ECC6  F00B         	call	_LCDPutCmd
   619                           
   620                           ;RE-door lock.c: 61: LCDGoto(1, 0);
   621  001164  0E00               	movlw	0
   622  001166  6E05               	movwf	LCDGoto@ln,c
   623  001168  0E01               	movlw	1
   624  00116A  EC88  F00B         	call	_LCDGoto
   625                           
   626                           ;RE-door lock.c: 62: sprintf(out, "ENTER PASSWORD");
   627  00116E  0E2A               	movlw	low _out
   628  001170  6E01               	movwf	sprintf@sp,c
   629  001172  0E00               	movlw	high _out
   630  001174  6E02               	movwf	sprintf@sp+1,c
   631  001176  0E23               	movlw	low STR_2
   632  001178  6E03               	movwf	sprintf@f,c
   633  00117A  0E10               	movlw	high STR_2
   634  00117C  6E04               	movwf	sprintf@f+1,c
   635  00117E  EC66  F00B         	call	_sprintf	;wreg free
   636                           
   637                           ;RE-door lock.c: 63: LCDPutStr(out);
   638  001182  0E2A               	movlw	low _out
   639  001184  6E05               	movwf	LCDPutStr@str,c
   640  001186  0E00               	movlw	high _out
   641  001188  6E06               	movwf	LCDPutStr@str+1,c
   642  00118A  ECE3  F00B         	call	_LCDPutStr	;wreg free
   643                           
   644                           ;RE-door lock.c: 66: for (int i = 0; i < 5; i++) {
   645  00118E  0E00               	movlw	0
   646  001190  6E23               	movwf	main@i+1,c
   647  001192  0E00               	movlw	0
   648  001194  6E22               	movwf	main@i,c
   649  001196  BE23               	btfsc	main@i+1,7,c
   650  001198  D008               	goto	l1523
   651  00119A  5023               	movf	main@i+1,w,c
   652  00119C  E105               	bnz	u490
   653  00119E  0E05               	movlw	5
   654  0011A0  5C22               	subwf	main@i,w,c
   655  0011A2  B0D8               	btfsc	status,0,c
   656  0011A4  D21C               	goto	l1715
   657  0011A6  D001               	goto	l1523
   658  0011A8                     u490:
   659  0011A8  D21A               	goto	l1715
   660  0011AA                     l1523:
   661                           
   662                           ;RE-door lock.c: 67: str[i] = UART_read_ch();
   663  0011AA  0E17               	movlw	low main@str
   664  0011AC  2422               	addwf	main@i,w,c
   665  0011AE  6ED9               	movwf	fsr2l,c
   666  0011B0  0E00               	movlw	high main@str
   667  0011B2  2023               	addwfc	main@i+1,w,c
   668  0011B4  6EDA               	movwf	fsr2h,c
   669  0011B6  EC59  F00C         	call	_UART_read_ch	;wreg free
   670  0011BA  6EDF               	movwf	indf2,c
   671                           
   672                           ;RE-door lock.c: 68: if (str[0] == 's') {
   673  0011BC  0E73               	movlw	115
   674  0011BE  1817               	xorwf	main@str,w,c
   675  0011C0  A4D8               	btfss	status,2,c
   676  0011C2  D113               	goto	l1619
   677                           
   678                           ;RE-door lock.c: 70: LCDPutCmd(0x01);
   679  0011C4  0E01               	movlw	1
   680  0011C6  ECC6  F00B         	call	_LCDPutCmd
   681                           
   682                           ;RE-door lock.c: 71: LCDGoto(0, 0);
   683  0011CA  0E00               	movlw	0
   684  0011CC  6E05               	movwf	LCDGoto@ln,c
   685  0011CE  0E00               	movlw	0
   686  0011D0  EC88  F00B         	call	_LCDGoto
   687                           
   688                           ;RE-door lock.c: 72: sprintf(out, "change pass    1");
   689  0011D4  0E2A               	movlw	low _out
   690  0011D6  6E01               	movwf	sprintf@sp,c
   691  0011D8  0E00               	movlw	high _out
   692  0011DA  6E02               	movwf	sprintf@sp+1,c
   693  0011DC  0E01               	movlw	low STR_3
   694  0011DE  6E03               	movwf	sprintf@f,c
   695  0011E0  0E10               	movlw	high STR_3
   696  0011E2  6E04               	movwf	sprintf@f+1,c
   697  0011E4  EC66  F00B         	call	_sprintf	;wreg free
   698                           
   699                           ;RE-door lock.c: 73: LCDPutStr(out);
   700  0011E8  0E2A               	movlw	low _out
   701  0011EA  6E05               	movwf	LCDPutStr@str,c
   702  0011EC  0E00               	movlw	high _out
   703  0011EE  6E06               	movwf	LCDPutStr@str+1,c
   704  0011F0  ECE3  F00B         	call	_LCDPutStr	;wreg free
   705                           
   706                           ;RE-door lock.c: 75: LCDGoto(0, 1);
   707  0011F4  0E01               	movlw	1
   708  0011F6  6E05               	movwf	LCDGoto@ln,c
   709  0011F8  0E00               	movlw	0
   710  0011FA  EC88  F00B         	call	_LCDGoto
   711                           
   712                           ;RE-door lock.c: 76: sprintf(out, "return         2");
   713  0011FE  0E2A               	movlw	low _out
   714  001200  6E01               	movwf	sprintf@sp,c
   715  001202  0E00               	movlw	high _out
   716  001204  6E02               	movwf	sprintf@sp+1,c
   717  001206  0E12               	movlw	low STR_4
   718  001208  6E03               	movwf	sprintf@f,c
   719  00120A  0E10               	movlw	high STR_4
   720  00120C  6E04               	movwf	sprintf@f+1,c
   721  00120E  EC66  F00B         	call	_sprintf	;wreg free
   722                           
   723                           ;RE-door lock.c: 77: LCDPutStr(out);
   724  001212  0E2A               	movlw	low _out
   725  001214  6E05               	movwf	LCDPutStr@str,c
   726  001216  0E00               	movlw	high _out
   727  001218  6E06               	movwf	LCDPutStr@str+1,c
   728  00121A  ECE3  F00B         	call	_LCDPutStr	;wreg free
   729                           
   730                           ;RE-door lock.c: 79: str[0] = UART_read_ch();
   731  00121E  EC59  F00C         	call	_UART_read_ch	;wreg free
   732  001222  6E17               	movwf	main@str,c
   733                           
   734                           ;RE-door lock.c: 80: if (str[0] == '1') {
   735  001224  0E31               	movlw	49
   736  001226  1817               	xorwf	main@str,w,c
   737  001228  A4D8               	btfss	status,2,c
   738  00122A  D799               	goto	l1511
   739                           
   740                           ;RE-door lock.c: 82: LCDPutCmd(0x01);
   741  00122C  0E01               	movlw	1
   742  00122E  ECC6  F00B         	call	_LCDPutCmd
   743                           
   744                           ;RE-door lock.c: 83: LCDGoto(0, 0);
   745  001232  0E00               	movlw	0
   746  001234  6E05               	movwf	LCDGoto@ln,c
   747  001236  0E00               	movlw	0
   748  001238  EC88  F00B         	call	_LCDGoto
   749                           
   750                           ;RE-door lock.c: 84: sprintf(out, "ENTER OLD PASS");
   751  00123C  0E2A               	movlw	low _out
   752  00123E  6E01               	movwf	sprintf@sp,c
   753  001240  0E00               	movlw	high _out
   754  001242  6E02               	movwf	sprintf@sp+1,c
   755  001244  0E32               	movlw	low STR_5
   756  001246  6E03               	movwf	sprintf@f,c
   757  001248  0E10               	movlw	high STR_5
   758  00124A  6E04               	movwf	sprintf@f+1,c
   759  00124C  EC66  F00B         	call	_sprintf	;wreg free
   760                           
   761                           ;RE-door lock.c: 85: LCDPutStr(out);
   762  001250  0E2A               	movlw	low _out
   763  001252  6E05               	movwf	LCDPutStr@str,c
   764  001254  0E00               	movlw	high _out
   765  001256  6E06               	movwf	LCDPutStr@str+1,c
   766  001258  ECE3  F00B         	call	_LCDPutStr	;wreg free
   767                           
   768                           ;RE-door lock.c: 86: for (int i = 0; i < 5; i++) {
   769  00125C  0E00               	movlw	0
   770  00125E  6E25               	movwf	main@i_247+1,c
   771  001260  0E00               	movlw	0
   772  001262  6E24               	movwf	main@i_247,c
   773  001264                     l1549:
   774  001264  BE25               	btfsc	main@i_247+1,7,c
   775  001266  D008               	goto	l1553
   776  001268  5025               	movf	main@i_247+1,w,c
   777  00126A  E113               	bnz	l1559
   778  00126C  0E05               	movlw	5
   779  00126E  5C24               	subwf	main@i_247,w,c
   780  001270  B0D8               	btfsc	status,0,c
   781  001272  D00F               	goto	l1559
   782  001274  D001               	goto	l1553
   783  001276  D00D               	goto	l1559
   784  001278                     l1553:
   785                           
   786                           ;RE-door lock.c: 87: str[i] = UART_read_ch();
   787  001278  0E17               	movlw	low main@str
   788  00127A  2424               	addwf	main@i_247,w,c
   789  00127C  6ED9               	movwf	fsr2l,c
   790  00127E  0E00               	movlw	high main@str
   791  001280  2025               	addwfc	main@i_247+1,w,c
   792  001282  6EDA               	movwf	fsr2h,c
   793  001284  EC59  F00C         	call	_UART_read_ch	;wreg free
   794  001288  6EDF               	movwf	indf2,c
   795  00128A  4A24               	infsnz	main@i_247,f,c
   796  00128C  2A25               	incf	main@i_247+1,f,c
   797  00128E  D7EA               	goto	l1549
   798  001290  D000               	goto	l1559
   799  001292                     l1559:
   800                           
   801                           ;RE-door lock.c: 88: }
   802                           ;RE-door lock.c: 89: str[4] = 0;
   803  001292  0E00               	movlw	0
   804  001294  6E1B               	movwf	main@str+4,c
   805                           
   806                           ;RE-door lock.c: 91: x = strcmp(str, pass);
   807  001296  0E17               	movlw	low main@str
   808  001298  6E01               	movwf	strcmp@s1,c
   809  00129A  0E00               	movlw	high main@str
   810  00129C  6E02               	movwf	strcmp@s1+1,c
   811  00129E  0E1D               	movlw	low main@pass
   812  0012A0  6E03               	movwf	strcmp@s2,c
   813  0012A2  0E00               	movlw	high main@pass
   814  0012A4  6E04               	movwf	strcmp@s2+1,c
   815  0012A6  EC3F  F00B         	call	_strcmp	;wreg free
   816  0012AA  5001               	movf	?_strcmp,w,c
   817  0012AC  6E1C               	movwf	main@x,c
   818                           
   819                           ;RE-door lock.c: 92: if (!x) {
   820  0012AE  501C               	movf	main@x,w,c
   821  0012B0  A4D8               	btfss	status,2,c
   822  0012B2  D07F               	goto	l1613
   823                           
   824                           ;RE-door lock.c: 94: LCDPutCmd(0x01);
   825  0012B4  0E01               	movlw	1
   826  0012B6  ECC6  F00B         	call	_LCDPutCmd
   827                           
   828                           ;RE-door lock.c: 95: LCDGoto(0, 0);
   829  0012BA  0E00               	movlw	0
   830  0012BC  6E05               	movwf	LCDGoto@ln,c
   831  0012BE  0E00               	movlw	0
   832  0012C0  EC88  F00B         	call	_LCDGoto
   833                           
   834                           ;RE-door lock.c: 96: sprintf(out, "ENTER NEW PASS");
   835  0012C4  0E2A               	movlw	low _out
   836  0012C6  6E01               	movwf	sprintf@sp,c
   837  0012C8  0E00               	movlw	high _out
   838  0012CA  6E02               	movwf	sprintf@sp+1,c
   839  0012CC  0E41               	movlw	low STR_6
   840  0012CE  6E03               	movwf	sprintf@f,c
   841  0012D0  0E10               	movlw	high STR_6
   842  0012D2  6E04               	movwf	sprintf@f+1,c
   843  0012D4  EC66  F00B         	call	_sprintf	;wreg free
   844                           
   845                           ;RE-door lock.c: 97: LCDPutStr(out);
   846  0012D8  0E2A               	movlw	low _out
   847  0012DA  6E05               	movwf	LCDPutStr@str,c
   848  0012DC  0E00               	movlw	high _out
   849  0012DE  6E06               	movwf	LCDPutStr@str+1,c
   850  0012E0  ECE3  F00B         	call	_LCDPutStr	;wreg free
   851                           
   852                           ;RE-door lock.c: 99: for (int i = 0; i < 5; i++) {
   853  0012E4  0E00               	movlw	0
   854  0012E6  6E27               	movwf	main@i_249+1,c
   855  0012E8  0E00               	movlw	0
   856  0012EA  6E26               	movwf	main@i_249,c
   857  0012EC                     l1573:
   858  0012EC  BE27               	btfsc	main@i_249+1,7,c
   859  0012EE  D008               	goto	l1577
   860  0012F0  5027               	movf	main@i_249+1,w,c
   861  0012F2  E113               	bnz	l1583
   862  0012F4  0E05               	movlw	5
   863  0012F6  5C26               	subwf	main@i_249,w,c
   864  0012F8  B0D8               	btfsc	status,0,c
   865  0012FA  D00F               	goto	l1583
   866  0012FC  D001               	goto	l1577
   867  0012FE  D00D               	goto	l1583
   868  001300                     l1577:
   869                           
   870                           ;RE-door lock.c: 100: pass[i] = UART_read_ch();
   871  001300  0E1D               	movlw	low main@pass
   872  001302  2426               	addwf	main@i_249,w,c
   873  001304  6ED9               	movwf	fsr2l,c
   874  001306  0E00               	movlw	high main@pass
   875  001308  2027               	addwfc	main@i_249+1,w,c
   876  00130A  6EDA               	movwf	fsr2h,c
   877  00130C  EC59  F00C         	call	_UART_read_ch	;wreg free
   878  001310  6EDF               	movwf	indf2,c
   879  001312  4A26               	infsnz	main@i_249,f,c
   880  001314  2A27               	incf	main@i_249+1,f,c
   881  001316  D7EA               	goto	l1573
   882  001318  D000               	goto	l1583
   883  00131A                     l1583:
   884                           
   885                           ;RE-door lock.c: 101: }
   886                           ;RE-door lock.c: 102: pass[4] = 0;
   887  00131A  0E00               	movlw	0
   888  00131C  6E21               	movwf	main@pass+4,c
   889                           
   890                           ;RE-door lock.c: 104: EEPROM_write(pass[0], 0x01);
   891  00131E  0E01               	movlw	1
   892  001320  6E01               	movwf	EEPROM_write@address,c
   893  001322  501D               	movf	main@pass,w,c
   894  001324  EC2B  F00C         	call	_EEPROM_write
   895                           
   896                           ;RE-door lock.c: 105: EEPROM_write(pass[1], 0x02);
   897  001328  0E02               	movlw	2
   898  00132A  6E01               	movwf	EEPROM_write@address,c
   899  00132C  501E               	movf	main@pass+1,w,c
   900  00132E  EC2B  F00C         	call	_EEPROM_write
   901                           
   902                           ;RE-door lock.c: 106: EEPROM_write(pass[2], 0x03);
   903  001332  0E03               	movlw	3
   904  001334  6E01               	movwf	EEPROM_write@address,c
   905  001336  501F               	movf	main@pass+2,w,c
   906  001338  EC2B  F00C         	call	_EEPROM_write
   907                           
   908                           ;RE-door lock.c: 107: EEPROM_write(pass[3], 0x04);
   909  00133C  0E04               	movlw	4
   910  00133E  6E01               	movwf	EEPROM_write@address,c
   911  001340  5020               	movf	main@pass+3,w,c
   912  001342  EC2B  F00C         	call	_EEPROM_write
   913                           
   914                           ;RE-door lock.c: 109: LCDPutCmd(0x01);
   915  001346  0E01               	movlw	1
   916  001348  ECC6  F00B         	call	_LCDPutCmd
   917                           
   918                           ;RE-door lock.c: 110: LCDGoto(6, 0);
   919  00134C  0E00               	movlw	0
   920  00134E  6E05               	movwf	LCDGoto@ln,c
   921  001350  0E06               	movlw	6
   922  001352  EC88  F00B         	call	_LCDGoto
   923                           
   924                           ;RE-door lock.c: 111: sprintf(out, "DONE");
   925  001356  0E2A               	movlw	low _out
   926  001358  6E01               	movwf	sprintf@sp,c
   927  00135A  0E00               	movlw	high _out
   928  00135C  6E02               	movwf	sprintf@sp+1,c
   929  00135E  0E82               	movlw	low STR_7
   930  001360  6E03               	movwf	sprintf@f,c
   931  001362  0E10               	movlw	high STR_7
   932  001364  6E04               	movwf	sprintf@f+1,c
   933  001366  EC66  F00B         	call	_sprintf	;wreg free
   934                           
   935                           ;RE-door lock.c: 112: LCDPutStr(out);
   936  00136A  0E2A               	movlw	low _out
   937  00136C  6E05               	movwf	LCDPutStr@str,c
   938  00136E  0E00               	movlw	high _out
   939  001370  6E06               	movwf	LCDPutStr@str+1,c
   940  001372  ECE3  F00B         	call	_LCDPutStr	;wreg free
   941                           
   942                           ;RE-door lock.c: 113: for (int j = 0; j < 20; j++)
   943  001376  0E00               	movlw	0
   944  001378  6E10               	movwf	main@j_251+1,c
   945  00137A  0E00               	movlw	0
   946  00137C  6E0F               	movwf	main@j_251,c
   947  00137E  BE10               	btfsc	main@j_251+1,7,c
   948  001380  D008               	goto	l1607
   949  001382  5010               	movf	main@j_251+1,w,c
   950  001384  E105               	bnz	u570
   951  001386  0E14               	movlw	20
   952  001388  5C0F               	subwf	main@j_251,w,c
   953  00138A  B0D8               	btfsc	status,0,c
   954  00138C  D6E8               	goto	l1511
   955  00138E  D001               	goto	l1607
   956  001390                     u570:
   957  001390  D6E6               	goto	l1511
   958  001392                     l1607:
   959                           
   960                           ;RE-door lock.c: 114: _delay((unsigned long)((50)*(8e6/4000.0)));
   961  001392  0E82               	movlw	130
   962  001394  6E0B               	movwf	??_main& (0+255),c
   963  001396  0EDE               	movlw	222
   964  001398                     u717:
   965  001398  2EE8               	decfsz	wreg,f,c
   966  00139A  D7FE               	goto	u717
   967  00139C  2E0B               	decfsz	??_main& (0+255),f,c
   968  00139E  D7FC               	goto	u717
   969  0013A0  4A0F               	infsnz	main@j_251,f,c
   970  0013A2  2A10               	incf	main@j_251+1,f,c
   971  0013A4  BE10               	btfsc	main@j_251+1,7,c
   972  0013A6  D7F5               	goto	l1607
   973  0013A8  5010               	movf	main@j_251+1,w,c
   974  0013AA  E101               	bnz	u580
   975  0013AC  D7EC               	goto	L1
   976  0013AE                     u580:
   977                           
   978                           ;RE-door lock.c: 115: goto start;
   979  0013AE  D6D7               	goto	l1511
   980                           
   981                           ;RE-door lock.c: 116: }else{
   982  0013B0  D01C               	goto	l1619
   983  0013B2                     l1613:
   984                           
   985                           ;RE-door lock.c: 117: LCDPutCmd(0x01);
   986  0013B2  0E01               	movlw	1
   987  0013B4  ECC6  F00B         	call	_LCDPutCmd
   988                           
   989                           ;RE-door lock.c: 118: LCDGoto(6, 0);
   990  0013B8  0E00               	movlw	0
   991  0013BA  6E05               	movwf	LCDGoto@ln,c
   992  0013BC  0E06               	movlw	6
   993  0013BE  EC88  F00B         	call	_LCDGoto
   994                           
   995                           ;RE-door lock.c: 119: sprintf(out, "wrong");
   996  0013C2  0E2A               	movlw	low _out
   997  0013C4  6E01               	movwf	sprintf@sp,c
   998  0013C6  0E00               	movlw	high _out
   999  0013C8  6E02               	movwf	sprintf@sp+1,c
  1000  0013CA  0E7C               	movlw	low STR_8
  1001  0013CC  6E03               	movwf	sprintf@f,c
  1002  0013CE  0E10               	movlw	high STR_8
  1003  0013D0  6E04               	movwf	sprintf@f+1,c
  1004  0013D2  EC66  F00B         	call	_sprintf	;wreg free
  1005                           
  1006                           ;RE-door lock.c: 120: LCDPutStr(out);
  1007  0013D6  0E2A               	movlw	low _out
  1008  0013D8  6E05               	movwf	LCDPutStr@str,c
  1009  0013DA  0E00               	movlw	high _out
  1010  0013DC  6E06               	movwf	LCDPutStr@str+1,c
  1011  0013DE  ECE3  F00B         	call	_LCDPutStr	;wreg free
  1012                           
  1013                           ;RE-door lock.c: 121: goto start;
  1014  0013E2  D6BD               	goto	l1511
  1015                           
  1016                           ;RE-door lock.c: 122: }
  1017                           ;RE-door lock.c: 124: } else {
  1018  0013E4  D002               	goto	l1619
  1019                           
  1020                           ;RE-door lock.c: 125: goto start;
  1021  0013E6  D6BB               	goto	l1511
  1022  0013E8  D000               	goto	l1619
  1023  0013EA                     l1619:
  1024  0013EA  4A22               	infsnz	main@i,f,c
  1025  0013EC  2A23               	incf	main@i+1,f,c
  1026  0013EE  BE23               	btfsc	main@i+1,7,c
  1027  0013F0  D6DC               	goto	l1523
  1028  0013F2  5023               	movf	main@i+1,w,c
  1029  0013F4  E102               	bnz	l1623
  1030  0013F6  D6D3               	goto	L2
  1031  0013F8  D0F2               	goto	l1715
  1032  0013FA                     l1623:
  1033  0013FA  D0F1               	goto	l1715
  1034  0013FC                     l1625:
  1035                           
  1036                           ;RE-door lock.c: 132: x = strcmp(str, pass);
  1037  0013FC  0E17               	movlw	low main@str
  1038  0013FE  6E01               	movwf	strcmp@s1,c
  1039  001400  0E00               	movlw	high main@str
  1040  001402  6E02               	movwf	strcmp@s1+1,c
  1041  001404  0E1D               	movlw	low main@pass
  1042  001406  6E03               	movwf	strcmp@s2,c
  1043  001408  0E00               	movlw	high main@pass
  1044  00140A  6E04               	movwf	strcmp@s2+1,c
  1045  00140C  EC3F  F00B         	call	_strcmp	;wreg free
  1046  001410  5001               	movf	?_strcmp,w,c
  1047  001412  6E1C               	movwf	main@x,c
  1048                           
  1049                           ;RE-door lock.c: 133: if (!x) {
  1050  001414  501C               	movf	main@x,w,c
  1051  001416  A4D8               	btfss	status,2,c
  1052  001418  D039               	goto	l1651
  1053                           
  1054                           ;RE-door lock.c: 134: c = 0;
  1055  00141A  0E00               	movlw	0
  1056  00141C  6E0C               	movwf	main@c,c
  1057                           
  1058                           ;RE-door lock.c: 135: LCDPutCmd(0x01);
  1059  00141E  0E01               	movlw	1
  1060  001420  ECC6  F00B         	call	_LCDPutCmd
  1061                           
  1062                           ;RE-door lock.c: 136: LCDGoto(2, 0);
  1063  001424  0E00               	movlw	0
  1064  001426  6E05               	movwf	LCDGoto@ln,c
  1065  001428  0E02               	movlw	2
  1066  00142A  EC88  F00B         	call	_LCDGoto
  1067                           
  1068                           ;RE-door lock.c: 137: sprintf(out, "welcome,heba");
  1069  00142E  0E2A               	movlw	low _out
  1070  001430  6E01               	movwf	sprintf@sp,c
  1071  001432  0E00               	movlw	high _out
  1072  001434  6E02               	movwf	sprintf@sp+1,c
  1073  001436  0E5E               	movlw	low STR_9
  1074  001438  6E03               	movwf	sprintf@f,c
  1075  00143A  0E10               	movlw	high STR_9
  1076  00143C  6E04               	movwf	sprintf@f+1,c
  1077  00143E  EC66  F00B         	call	_sprintf	;wreg free
  1078                           
  1079                           ;RE-door lock.c: 138: LCDPutStr(out);
  1080  001442  0E2A               	movlw	low _out
  1081  001444  6E05               	movwf	LCDPutStr@str,c
  1082  001446  0E00               	movlw	high _out
  1083  001448  6E06               	movwf	LCDPutStr@str+1,c
  1084  00144A  ECE3  F00B         	call	_LCDPutStr	;wreg free
  1085                           
  1086                           ;RE-door lock.c: 139: LATB2 = 1;
  1087  00144E  848A               	bsf	3978,2,c	;volatile
  1088                           
  1089                           ;RE-door lock.c: 140: for (int j = 0; j < 20; j++)
  1090  001450  0E00               	movlw	0
  1091  001452  6E12               	movwf	main@j_254+1,c
  1092  001454  0E00               	movlw	0
  1093  001456  6E11               	movwf	main@j_254,c
  1094  001458  BE12               	btfsc	main@j_254+1,7,c
  1095  00145A  D008               	goto	l1647
  1096  00145C  5012               	movf	main@j_254+1,w,c
  1097  00145E  E114               	bnz	l206
  1098  001460  0E14               	movlw	20
  1099  001462  5C11               	subwf	main@j_254,w,c
  1100  001464  B0D8               	btfsc	status,0,c
  1101  001466  D010               	goto	l206
  1102  001468  D001               	goto	l1647
  1103  00146A  D00E               	goto	l206
  1104  00146C                     l1647:
  1105                           
  1106                           ;RE-door lock.c: 141: _delay((unsigned long)((50)*(8e6/4000.0)));
  1107  00146C  0E82               	movlw	130
  1108  00146E  6E0B               	movwf	??_main& (0+255),c
  1109  001470  0EDE               	movlw	222
  1110  001472                     u727:
  1111  001472  2EE8               	decfsz	wreg,f,c
  1112  001474  D7FE               	goto	u727
  1113  001476  2E0B               	decfsz	??_main& (0+255),f,c
  1114  001478  D7FC               	goto	u727
  1115  00147A  4A11               	infsnz	main@j_254,f,c
  1116  00147C  2A12               	incf	main@j_254+1,f,c
  1117  00147E  BE12               	btfsc	main@j_254+1,7,c
  1118  001480  D7F5               	goto	l1647
  1119  001482  5012               	movf	main@j_254+1,w,c
  1120  001484  E101               	bnz	u620
  1121  001486  D7EC               	goto	L3
  1122  001488                     u620:
  1123  001488                     l206:
  1124                           
  1125                           ;RE-door lock.c: 142: LATB2 = 0;
  1126  001488  948A               	bcf	3978,2,c	;volatile
  1127                           
  1128                           ;RE-door lock.c: 144: } else {
  1129  00148A  D669               	goto	l1511
  1130  00148C                     l1651:
  1131                           
  1132                           ;RE-door lock.c: 145: c++;
  1133  00148C  2A0C               	incf	main@c,f,c
  1134                           
  1135                           ;RE-door lock.c: 146: if (c == 3) {
  1136  00148E  0E03               	movlw	3
  1137  001490  180C               	xorwf	main@c,w,c
  1138  001492  A4D8               	btfss	status,2,c
  1139  001494  D03B               	goto	l1679
  1140                           
  1141                           ;RE-door lock.c: 147: c = 0;
  1142  001496  0E00               	movlw	0
  1143  001498  6E0C               	movwf	main@c,c
  1144                           
  1145                           ;RE-door lock.c: 148: LCDPutCmd(0x01);
  1146  00149A  0E01               	movlw	1
  1147  00149C  ECC6  F00B         	call	_LCDPutCmd
  1148                           
  1149                           ;RE-door lock.c: 149: LCDGoto(5, 0);
  1150  0014A0  0E00               	movlw	0
  1151  0014A2  6E05               	movwf	LCDGoto@ln,c
  1152  0014A4  0E05               	movlw	5
  1153  0014A6  EC88  F00B         	call	_LCDGoto
  1154                           
  1155                           ;RE-door lock.c: 150: sprintf(out, "WRONG");
  1156  0014AA  0E2A               	movlw	low _out
  1157  0014AC  6E01               	movwf	sprintf@sp,c
  1158  0014AE  0E00               	movlw	high _out
  1159  0014B0  6E02               	movwf	sprintf@sp+1,c
  1160  0014B2  0E76               	movlw	low STR_10
  1161  0014B4  6E03               	movwf	sprintf@f,c
  1162  0014B6  0E10               	movlw	high STR_10
  1163  0014B8  6E04               	movwf	sprintf@f+1,c
  1164  0014BA  EC66  F00B         	call	_sprintf	;wreg free
  1165                           
  1166                           ;RE-door lock.c: 151: LCDPutStr(out);
  1167  0014BE  0E2A               	movlw	low _out
  1168  0014C0  6E05               	movwf	LCDPutStr@str,c
  1169  0014C2  0E00               	movlw	high _out
  1170  0014C4  6E06               	movwf	LCDPutStr@str+1,c
  1171  0014C6  ECE3  F00B         	call	_LCDPutStr	;wreg free
  1172                           
  1173                           ;RE-door lock.c: 152: LATB1 = 1;
  1174  0014CA  828A               	bsf	3978,1,c	;volatile
  1175                           
  1176                           ;RE-door lock.c: 153: LATB0 = 1;
  1177  0014CC  808A               	bsf	3978,0,c	;volatile
  1178                           
  1179                           ;RE-door lock.c: 154: for (int j = 0; j < 30; j++)
  1180  0014CE  0E00               	movlw	0
  1181  0014D0  6E14               	movwf	main@j_256+1,c
  1182  0014D2  0E00               	movlw	0
  1183  0014D4  6E13               	movwf	main@j_256,c
  1184  0014D6  BE14               	btfsc	main@j_256+1,7,c
  1185  0014D8  D008               	goto	l1675
  1186  0014DA  5014               	movf	main@j_256+1,w,c
  1187  0014DC  E114               	bnz	l210
  1188  0014DE  0E1E               	movlw	30
  1189  0014E0  5C13               	subwf	main@j_256,w,c
  1190  0014E2  B0D8               	btfsc	status,0,c
  1191  0014E4  D010               	goto	l210
  1192  0014E6  D001               	goto	l1675
  1193  0014E8  D00E               	goto	l210
  1194  0014EA                     l1675:
  1195                           
  1196                           ;RE-door lock.c: 155: _delay((unsigned long)((50)*(8e6/4000.0)));
  1197  0014EA  0E82               	movlw	130
  1198  0014EC  6E0B               	movwf	??_main& (0+255),c
  1199  0014EE  0EDE               	movlw	222
  1200  0014F0                     u737:
  1201  0014F0  2EE8               	decfsz	wreg,f,c
  1202  0014F2  D7FE               	goto	u737
  1203  0014F4  2E0B               	decfsz	??_main& (0+255),f,c
  1204  0014F6  D7FC               	goto	u737
  1205  0014F8  4A13               	infsnz	main@j_256,f,c
  1206  0014FA  2A14               	incf	main@j_256+1,f,c
  1207  0014FC  BE14               	btfsc	main@j_256+1,7,c
  1208  0014FE  D7F5               	goto	l1675
  1209  001500  5014               	movf	main@j_256+1,w,c
  1210  001502  E101               	bnz	u650
  1211  001504  D7EC               	goto	L4
  1212  001506                     u650:
  1213  001506                     l210:
  1214                           
  1215                           ;RE-door lock.c: 156: LATB1 = 0;
  1216  001506  928A               	bcf	3978,1,c	;volatile
  1217                           
  1218                           ;RE-door lock.c: 157: LATB0 = 0;
  1219  001508  908A               	bcf	3978,0,c	;volatile
  1220                           
  1221                           ;RE-door lock.c: 158: goto start;
  1222  00150A  D629               	goto	l1511
  1223  00150C                     l1679:
  1224                           
  1225                           ;RE-door lock.c: 159: }
  1226                           ;RE-door lock.c: 161: LCDPutCmd(0x01);
  1227  00150C  0E01               	movlw	1
  1228  00150E  ECC6  F00B         	call	_LCDPutCmd
  1229                           
  1230                           ;RE-door lock.c: 162: LCDGoto(5, 0);
  1231  001512  0E00               	movlw	0
  1232  001514  6E05               	movwf	LCDGoto@ln,c
  1233  001516  0E05               	movlw	5
  1234  001518  EC88  F00B         	call	_LCDGoto
  1235                           
  1236                           ;RE-door lock.c: 163: sprintf(out, "WRONG");
  1237  00151C  0E2A               	movlw	low _out
  1238  00151E  6E01               	movwf	sprintf@sp,c
  1239  001520  0E00               	movlw	high _out
  1240  001522  6E02               	movwf	sprintf@sp+1,c
  1241  001524  0E76               	movlw	low STR_10
  1242  001526  6E03               	movwf	sprintf@f,c
  1243  001528  0E10               	movlw	high STR_10
  1244  00152A  6E04               	movwf	sprintf@f+1,c
  1245  00152C  EC66  F00B         	call	_sprintf	;wreg free
  1246                           
  1247                           ;RE-door lock.c: 164: LCDPutStr(out);
  1248  001530  0E2A               	movlw	low _out
  1249  001532  6E05               	movwf	LCDPutStr@str,c
  1250  001534  0E00               	movlw	high _out
  1251  001536  6E06               	movwf	LCDPutStr@str+1,c
  1252  001538  ECE3  F00B         	call	_LCDPutStr	;wreg free
  1253                           
  1254                           ;RE-door lock.c: 165: LATB1 = 1;
  1255  00153C  828A               	bsf	3978,1,c	;volatile
  1256                           
  1257                           ;RE-door lock.c: 166: for (int j = 0; j < 20; j++)
  1258  00153E  0E00               	movlw	0
  1259  001540  6E16               	movwf	main@j_258+1,c
  1260  001542  0E00               	movlw	0
  1261  001544  6E15               	movwf	main@j_258,c
  1262  001546  BE16               	btfsc	main@j_258+1,7,c
  1263  001548  D008               	goto	l1693
  1264  00154A  5016               	movf	main@j_258+1,w,c
  1265  00154C  E114               	bnz	l212
  1266  00154E  0E14               	movlw	20
  1267  001550  5C15               	subwf	main@j_258,w,c
  1268  001552  B0D8               	btfsc	status,0,c
  1269  001554  D010               	goto	l212
  1270  001556  D001               	goto	l1693
  1271  001558  D00E               	goto	l212
  1272  00155A                     l1693:
  1273                           
  1274                           ;RE-door lock.c: 167: _delay((unsigned long)((50)*(8e6/4000.0)));
  1275  00155A  0E82               	movlw	130
  1276  00155C  6E0B               	movwf	??_main& (0+255),c
  1277  00155E  0EDE               	movlw	222
  1278  001560                     u747:
  1279  001560  2EE8               	decfsz	wreg,f,c
  1280  001562  D7FE               	goto	u747
  1281  001564  2E0B               	decfsz	??_main& (0+255),f,c
  1282  001566  D7FC               	goto	u747
  1283  001568  4A15               	infsnz	main@j_258,f,c
  1284  00156A  2A16               	incf	main@j_258+1,f,c
  1285  00156C  BE16               	btfsc	main@j_258+1,7,c
  1286  00156E  D7F5               	goto	l1693
  1287  001570  5016               	movf	main@j_258+1,w,c
  1288  001572  E101               	bnz	u670
  1289  001574  D7EC               	goto	L5
  1290  001576                     u670:
  1291  001576                     l212:
  1292                           
  1293                           ;RE-door lock.c: 168: LATB1 = 0;
  1294  001576  928A               	bcf	3978,1,c	;volatile
  1295                           
  1296                           ;RE-door lock.c: 170: LCDPutCmd(0x01);
  1297  001578  0E01               	movlw	1
  1298  00157A  ECC6  F00B         	call	_LCDPutCmd
  1299                           
  1300                           ;RE-door lock.c: 171: LCDGoto(2, 0);
  1301  00157E  0E00               	movlw	0
  1302  001580  6E05               	movwf	LCDGoto@ln,c
  1303  001582  0E02               	movlw	2
  1304  001584  EC88  F00B         	call	_LCDGoto
  1305                           
  1306                           ;RE-door lock.c: 172: sprintf(out, "RE_ENTER PASS");
  1307  001588  0E2A               	movlw	low _out
  1308  00158A  6E01               	movwf	sprintf@sp,c
  1309  00158C  0E00               	movlw	high _out
  1310  00158E  6E02               	movwf	sprintf@sp+1,c
  1311  001590  0E50               	movlw	low STR_12
  1312  001592  6E03               	movwf	sprintf@f,c
  1313  001594  0E10               	movlw	high STR_12
  1314  001596  6E04               	movwf	sprintf@f+1,c
  1315  001598  EC66  F00B         	call	_sprintf	;wreg free
  1316                           
  1317                           ;RE-door lock.c: 173: LCDPutStr(out);
  1318  00159C  0E2A               	movlw	low _out
  1319  00159E  6E05               	movwf	LCDPutStr@str,c
  1320  0015A0  0E00               	movlw	high _out
  1321  0015A2  6E06               	movwf	LCDPutStr@str+1,c
  1322  0015A4  ECE3  F00B         	call	_LCDPutStr	;wreg free
  1323                           
  1324                           ;RE-door lock.c: 175: for (int i = 0; i < 5; i++) {
  1325  0015A8  0E00               	movlw	0
  1326  0015AA  6E29               	movwf	main@i_260+1,c
  1327  0015AC  0E00               	movlw	0
  1328  0015AE  6E28               	movwf	main@i_260,c
  1329  0015B0                     l1705:
  1330  0015B0  BE29               	btfsc	main@i_260+1,7,c
  1331  0015B2  D008               	goto	l1709
  1332  0015B4  5029               	movf	main@i_260+1,w,c
  1333  0015B6  E113               	bnz	l1715
  1334  0015B8  0E05               	movlw	5
  1335  0015BA  5C28               	subwf	main@i_260,w,c
  1336  0015BC  B0D8               	btfsc	status,0,c
  1337  0015BE  D00F               	goto	l1715
  1338  0015C0  D001               	goto	l1709
  1339  0015C2  D00D               	goto	l1715
  1340  0015C4                     l1709:
  1341                           
  1342                           ;RE-door lock.c: 176: str[i] = UART_read_ch();
  1343  0015C4  0E17               	movlw	low main@str
  1344  0015C6  2428               	addwf	main@i_260,w,c
  1345  0015C8  6ED9               	movwf	fsr2l,c
  1346  0015CA  0E00               	movlw	high main@str
  1347  0015CC  2029               	addwfc	main@i_260+1,w,c
  1348  0015CE  6EDA               	movwf	fsr2h,c
  1349  0015D0  EC59  F00C         	call	_UART_read_ch	;wreg free
  1350  0015D4  6EDF               	movwf	indf2,c
  1351  0015D6  4A28               	infsnz	main@i_260,f,c
  1352  0015D8  2A29               	incf	main@i_260+1,f,c
  1353  0015DA  D7EA               	goto	l1705
  1354  0015DC  D000               	goto	l1715
  1355  0015DE                     l1715:
  1356                           
  1357                           ;RE-door lock.c: 177: }
  1358                           ;RE-door lock.c: 178: str[4] = 0;
  1359  0015DE  0E00               	movlw	0
  1360  0015E0  6E1B               	movwf	main@str+4,c
  1361                           
  1362                           ;RE-door lock.c: 179: goto check;
  1363  0015E2  D70C               	goto	l1625
  1364  0015E4  D5BC               	goto	l1511
  1365  0015E6  EF00  F000         	goto	start
  1366  0015EA                     __end_of_main:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           indf2	equ	0xFDF
  1372                           fsr2h	equ	0xFDA
  1373                           fsr2l	equ	0xFD9
  1374                           status	equ	0xFD8
  1375                           
  1376 ;; *************** function _strcmp *****************
  1377 ;; Defined at:
  1378 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcmp.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  1381 ;;		 -> main@str(5), 
  1382 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  1383 ;;		 -> main@pass(5), 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  r               1    5[COMRAM] char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  2    0[COMRAM] int 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;Total ram usage:        6 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text1
  1409  00167E                     __ptext1:
  1410                           	opt stack 0
  1411  00167E                     _strcmp:
  1412                           	opt stack 30
  1413                           
  1414                           ;incstack = 0
  1415  00167E  D005               	goto	l1451
  1416  001680                     l1449:
  1417  001680  4A01               	infsnz	strcmp@s1,f,c
  1418  001682  2A02               	incf	strcmp@s1+1,f,c
  1419  001684  4A03               	infsnz	strcmp@s2,f,c
  1420  001686  2A04               	incf	strcmp@s2+1,f,c
  1421  001688  D000               	goto	l1451
  1422  00168A                     l1451:
  1423  00168A  C001  FFD9         	movff	strcmp@s1,fsr2l
  1424  00168E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  1425  001692  50DF               	movf	indf2,w,c
  1426  001694  6E05               	movwf	??_strcmp& (0+255),c
  1427  001696  C003  FFD9         	movff	strcmp@s2,fsr2l
  1428  00169A  C004  FFDA         	movff	strcmp@s2+1,fsr2h
  1429  00169E  50DF               	movf	indf2,w,c
  1430  0016A0  0800               	sublw	0
  1431  0016A2  2405               	addwf	??_strcmp,w,c
  1432  0016A4  6E06               	movwf	strcmp@r,c
  1433  0016A6  5006               	movf	strcmp@r,w,c
  1434  0016A8  A4D8               	btfss	status,2,c
  1435  0016AA  D009               	goto	l1455
  1436  0016AC  C001  FFD9         	movff	strcmp@s1,fsr2l
  1437  0016B0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  1438  0016B4  50DF               	movf	indf2,w,c
  1439  0016B6  B4D8               	btfsc	status,2,c
  1440  0016B8  D002               	goto	l1455
  1441  0016BA  D7E2               	goto	l1449
  1442  0016BC  D000               	goto	l1455
  1443  0016BE                     l1455:
  1444  0016BE  5006               	movf	strcmp@r,w,c
  1445  0016C0  6E01               	movwf	?_strcmp,c
  1446  0016C2  6A02               	clrf	?_strcmp+1,c
  1447  0016C4  BE01               	btfsc	?_strcmp,7,c
  1448  0016C6  0602               	decf	?_strcmp+1,f,c
  1449  0016C8  D000               	goto	l781
  1450  0016CA                     l781:
  1451  0016CA  0012               	return		;funcret
  1452  0016CC                     __end_of_strcmp:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           indf2	equ	0xFDF
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _sprintf *****************
  1463 ;; Defined at:
  1464 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  sp              2    0[COMRAM] PTR unsigned char 
  1467 ;;		 -> out(16), 
  1468 ;;  f               2    2[COMRAM] PTR const unsigned char 
  1469 ;;		 -> STR_12(14), STR_11(6), STR_10(6), STR_9(13), 
  1470 ;;		 -> STR_8(6), STR_7(5), STR_6(15), STR_5(15), 
  1471 ;;		 -> STR_4(17), STR_3(17), STR_2(15), STR_1(11), 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  tmpval          4    0        struct .
  1474 ;;  cp              3    0        PTR const unsigned char 
  1475 ;;  ap              2    4[COMRAM] PTR void [1]
  1476 ;;		 -> ?_sprintf(2), 
  1477 ;;  len             2    0        unsigned int 
  1478 ;;  val             2    0        unsigned int 
  1479 ;;  c               1    6[COMRAM] char 
  1480 ;;  flag            1    0        unsigned char 
  1481 ;;  prec            1    0        char 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  2    0[COMRAM] int 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;Total ram usage:        7 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text2
  1505  0016CC                     __ptext2:
  1506                           	opt stack 0
  1507  0016CC                     _sprintf:
  1508                           	opt stack 30
  1509                           
  1510                           ;doprnt.c: 494: va_list ap;
  1511                           ;doprnt.c: 499: signed char c;
  1512                           ;doprnt.c: 506: signed char prec;
  1513                           ;doprnt.c: 508: unsigned char flag;
  1514                           ;doprnt.c: 523: union {
  1515                           ;doprnt.c: 524: unsigned long vd;
  1516                           ;doprnt.c: 525: double integ;
  1517                           ;doprnt.c: 526: } tmpval;
  1518                           ;doprnt.c: 528: unsigned int val;
  1519                           ;doprnt.c: 529: unsigned len;
  1520                           ;doprnt.c: 530: const char * cp;
  1521                           ;doprnt.c: 533: *ap = __va_start();
  1522                           
  1523                           ;incstack = 0
  1524  0016CC  0E05               	movlw	low (?_sprintf+4)
  1525  0016CE  6E05               	movwf	sprintf@ap,c
  1526  0016D0  0E00               	movlw	high (?_sprintf+4)
  1527  0016D2  6E06               	movwf	sprintf@ap+1,c
  1528                           
  1529                           ;doprnt.c: 536: while(c = *f++) {
  1530  0016D4  D009               	goto	l1441
  1531  0016D6                     l1437:
  1532                           
  1533                           ;doprnt.c: 540: {
  1534                           ;doprnt.c: 541: ((*sp++ = (c)));
  1535  0016D6  C001  FFD9         	movff	sprintf@sp,fsr2l
  1536  0016DA  C002  FFDA         	movff	sprintf@sp+1,fsr2h
  1537  0016DE  C007  FFDF         	movff	sprintf@c,indf2
  1538  0016E2  4A01               	infsnz	sprintf@sp,f,c
  1539  0016E4  2A02               	incf	sprintf@sp+1,f,c
  1540                           
  1541                           ;doprnt.c: 542: continue;
  1542  0016E6  D000               	goto	l1441
  1543  0016E8                     l1441:
  1544  0016E8  C003  FFF6         	movff	sprintf@f,tblptrl
  1545  0016EC  C004  FFF7         	movff	sprintf@f+1,tblptrh
  1546  0016F0  4A03               	infsnz	sprintf@f,f,c
  1547  0016F2  2A04               	incf	sprintf@f+1,f,c
  1548  0016F4                     	if	0	;tblptru may be non-zero
  1549  0016F4                     	endif
  1550  0016F4                     	if	0	;tblptru may be non-zero
  1551  0016F4                     	endif
  1552  0016F4  0008               	tblrd		*
  1553  0016F6  CFF5 F007          	movff	tablat,sprintf@c
  1554  0016FA  5007               	movf	sprintf@c,w,c
  1555  0016FC  A4D8               	btfss	status,2,c
  1556  0016FE  D7EB               	goto	l1437
  1557                           
  1558                           ;doprnt.c: 1469: }
  1559                           ;doprnt.c: 1533: }
  1560                           ;doprnt.c: 1538: *sp = 0;
  1561  001700  C001  FFD9         	movff	sprintf@sp,fsr2l
  1562  001704  C002  FFDA         	movff	sprintf@sp+1,fsr2h
  1563  001708  0E00               	movlw	0
  1564  00170A  6EDF               	movwf	indf2,c
  1565  00170C  D000               	goto	l225
  1566  00170E                     l225:
  1567  00170E  0012               	return		;funcret
  1568  001710                     __end_of_sprintf:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           indf2	equ	0xFDF
  1577                           fsr2h	equ	0xFDA
  1578                           fsr2l	equ	0xFD9
  1579                           status	equ	0xFD8
  1580                           
  1581 ;; *************** function _UART_read_ch *****************
  1582 ;; Defined at:
  1583 ;;		line 64 in file "uart_liberary.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;		None
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;		None
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  1    wreg      unsigned char 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;Total ram usage:        0 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;;		_UART_read_str
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text3
  1612  0018B2                     __ptext3:
  1613                           	opt stack 0
  1614  0018B2                     _UART_read_ch:
  1615                           	opt stack 30
  1616                           
  1617                           ;uart_liberary.c: 66: CREN = 1;
  1618                           
  1619                           ;incstack = 0
  1620  0018B2  88AB               	bsf	4011,4,c	;volatile
  1621                           
  1622                           ;uart_liberary.c: 67: while (!RCIF);
  1623  0018B4  D000               	goto	l130
  1624  0018B6                     l130:
  1625  0018B6  AA9E               	btfss	3998,5,c	;volatile
  1626  0018B8  D7FE               	goto	l130
  1627                           
  1628                           ;uart_liberary.c: 68: return RCREG;
  1629  0018BA  50AE               	movf	4014,w,c	;volatile
  1630  0018BC  D000               	goto	l133
  1631  0018BE                     l133:
  1632  0018BE  0012               	return		;funcret
  1633  0018C0                     __end_of_UART_read_ch:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           indf2	equ	0xFDF
  1642                           fsr2h	equ	0xFDA
  1643                           fsr2l	equ	0xFD9
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _UART_initi *****************
  1647 ;; Defined at:
  1648 ;;		line 6 in file "uart_liberary.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  BR              2    0[COMRAM] int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;		None               void
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;Total ram usage:        4 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_main
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text4
  1676  0015EA                     __ptext4:
  1677                           	opt stack 0
  1678  0015EA                     _UART_initi:
  1679                           	opt stack 30
  1680                           
  1681                           ;uart_liberary.c: 8: SPEN = 1;
  1682                           
  1683                           ;incstack = 0
  1684  0015EA  8EAB               	bsf	4011,7,c	;volatile
  1685                           
  1686                           ;uart_liberary.c: 9: TX9 = 0;
  1687  0015EC  9CAC               	bcf	4012,6,c	;volatile
  1688                           
  1689                           ;uart_liberary.c: 10: SYNC = 0;
  1690  0015EE  98AC               	bcf	4012,4,c	;volatile
  1691                           
  1692                           ;uart_liberary.c: 11: BRG16 = 1;
  1693  0015F0  86B8               	bsf	4024,3,c	;volatile
  1694                           
  1695                           ;uart_liberary.c: 12: BRGH = 1;
  1696  0015F2  84AC               	bsf	4012,2,c	;volatile
  1697                           
  1698                           ;uart_liberary.c: 15: switch (BR) {
  1699  0015F4  D00D               	goto	l1409
  1700  0015F6                     l1395:
  1701                           
  1702                           ;uart_liberary.c: 17: {
  1703                           ;uart_liberary.c: 18: SPBRG = 6665;
  1704  0015F6  0E09               	movlw	9
  1705  0015F8  D009               	goto	L10
  1706  0015FA                     l1397:
  1707                           
  1708                           ;uart_liberary.c: 22: {
  1709                           ;uart_liberary.c: 23: SPBRG = 1665;
  1710  0015FA  0E81               	movlw	129
  1711  0015FC  D007               	goto	L10
  1712  0015FE                     l1399:
  1713                           
  1714                           ;uart_liberary.c: 27: {
  1715                           ;uart_liberary.c: 28: SPBRG = 832;
  1716  0015FE  0E40               	movlw	64
  1717  001600  D005               	goto	L10
  1718  001602                     l1401:
  1719                           
  1720                           ;uart_liberary.c: 32: {
  1721                           ;uart_liberary.c: 33: SPBRG = 207;
  1722  001602  0ECF               	movlw	207
  1723  001604  D003               	goto	L10
  1724  001606                     l1403:
  1725                           
  1726                           ;uart_liberary.c: 37: {
  1727                           ;uart_liberary.c: 38: SPBRG = 103;
  1728  001606  0E67               	movlw	103
  1729  001608  D001               	goto	L10
  1730  00160A                     l1405:
  1731                           
  1732                           ;uart_liberary.c: 42: {
  1733                           ;uart_liberary.c: 43: SPBRG = 34;
  1734  00160A  0E22               	movlw	34
  1735  00160C                     L10:
  1736  00160C  6EAF               	movwf	4015,c	;volatile
  1737                           
  1738                           ;uart_liberary.c: 45: }
  1739                           ;uart_liberary.c: 46: }
  1740                           
  1741                           ;uart_liberary.c: 44: break;
  1742  00160E  D036               	goto	l115
  1743  001610                     l1409:
  1744  001610  C001  F003         	movff	UART_initi@BR,??_UART_initi
  1745  001614  C002  F004         	movff	UART_initi@BR+1,??_UART_initi+1
  1746                           
  1747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  1748                           ; Switch size 1, requested type "space"
  1749                           ; Number of cases is 6, Range of values is 1 to 225
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte           19    10 (average)
  1753                           ;	Chosen strategy is simple_byte
  1754  001618  5004               	movf	??_UART_initi+1,w,c
  1755  00161A  0A01               	xorlw	1	; case 1
  1756  00161C  B4D8               	btfsc	status,2,c
  1757  00161E  D010               	goto	l1741
  1758  001620  0A05               	xorlw	5	; case 4
  1759  001622  B4D8               	btfsc	status,2,c
  1760  001624  D012               	goto	l1743
  1761  001626  0A0D               	xorlw	13	; case 9
  1762  001628  B4D8               	btfsc	status,2,c
  1763  00162A  D014               	goto	l1745
  1764  00162C  0A2C               	xorlw	44	; case 37
  1765  00162E  B4D8               	btfsc	status,2,c
  1766  001630  D016               	goto	l1747
  1767  001632  0A6E               	xorlw	110	; case 75
  1768  001634  B4D8               	btfsc	status,2,c
  1769  001636  D018               	goto	l1749
  1770  001638  0AAA               	xorlw	170	; case 225
  1771  00163A  B4D8               	btfsc	status,2,c
  1772  00163C  D01A               	goto	l1751
  1773  00163E  D01E               	goto	l115
  1774  001640                     l1741:
  1775                           
  1776                           ; Switch size 1, requested type "space"
  1777                           ; Number of cases is 1, Range of values is 44 to 44
  1778                           ; switch strategies available:
  1779                           ; Name         Instructions Cycles
  1780                           ; simple_byte            4     3 (average)
  1781                           ;	Chosen strategy is simple_byte
  1782  001640  5003               	movf	??_UART_initi,w,c
  1783  001642  0A2C               	xorlw	44	; case 44
  1784  001644  B4D8               	btfsc	status,2,c
  1785  001646  D7D7               	goto	l1395
  1786  001648  D019               	goto	l115
  1787  00164A                     l1743:
  1788                           
  1789                           ; Switch size 1, requested type "space"
  1790                           ; Number of cases is 1, Range of values is 176 to 176
  1791                           ; switch strategies available:
  1792                           ; Name         Instructions Cycles
  1793                           ; simple_byte            4     3 (average)
  1794                           ;	Chosen strategy is simple_byte
  1795  00164A  5003               	movf	??_UART_initi,w,c
  1796  00164C  0AB0               	xorlw	176	; case 176
  1797  00164E  B4D8               	btfsc	status,2,c
  1798  001650  D7D4               	goto	l1397
  1799  001652  D014               	goto	l115
  1800  001654                     l1745:
  1801                           
  1802                           ; Switch size 1, requested type "space"
  1803                           ; Number of cases is 1, Range of values is 96 to 96
  1804                           ; switch strategies available:
  1805                           ; Name         Instructions Cycles
  1806                           ; simple_byte            4     3 (average)
  1807                           ;	Chosen strategy is simple_byte
  1808  001654  5003               	movf	??_UART_initi,w,c
  1809  001656  0A60               	xorlw	96	; case 96
  1810  001658  B4D8               	btfsc	status,2,c
  1811  00165A  D7D1               	goto	l1399
  1812  00165C  D00F               	goto	l115
  1813  00165E                     l1747:
  1814                           
  1815                           ; Switch size 1, requested type "space"
  1816                           ; Number of cases is 1, Range of values is 128 to 128
  1817                           ; switch strategies available:
  1818                           ; Name         Instructions Cycles
  1819                           ; simple_byte            4     3 (average)
  1820                           ;	Chosen strategy is simple_byte
  1821  00165E  5003               	movf	??_UART_initi,w,c
  1822  001660  0A80               	xorlw	128	; case 128
  1823  001662  B4D8               	btfsc	status,2,c
  1824  001664  D7CE               	goto	l1401
  1825  001666  D00A               	goto	l115
  1826  001668                     l1749:
  1827                           
  1828                           ; Switch size 1, requested type "space"
  1829                           ; Number of cases is 1, Range of values is 0 to 0
  1830                           ; switch strategies available:
  1831                           ; Name         Instructions Cycles
  1832                           ; simple_byte            4     3 (average)
  1833                           ;	Chosen strategy is simple_byte
  1834  001668  5003               	movf	??_UART_initi,w,c
  1835  00166A  0A00               	xorlw	0	; case 0
  1836  00166C  B4D8               	btfsc	status,2,c
  1837  00166E  D7CB               	goto	l1403
  1838  001670  D005               	goto	l115
  1839  001672                     l1751:
  1840                           
  1841                           ; Switch size 1, requested type "space"
  1842                           ; Number of cases is 1, Range of values is 0 to 0
  1843                           ; switch strategies available:
  1844                           ; Name         Instructions Cycles
  1845                           ; simple_byte            4     3 (average)
  1846                           ;	Chosen strategy is simple_byte
  1847  001672  5003               	movf	??_UART_initi,w,c
  1848  001674  0A00               	xorlw	0	; case 0
  1849  001676  B4D8               	btfsc	status,2,c
  1850  001678  D7C8               	goto	l1405
  1851  00167A  D000               	goto	l115
  1852  00167C                     l115:
  1853  00167C  0012               	return		;funcret
  1854  00167E                     __end_of_UART_initi:
  1855                           	opt stack 0
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _LCD_Initialize *****************
  1868 ;; Defined at:
  1869 ;;		line 6 in file "lcd.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        1 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    2
  1890 ;; This function calls:
  1891 ;;		_LCDPutCmd
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text5
  1898  001752                     __ptext5:
  1899                           	opt stack 0
  1900  001752                     _LCD_Initialize:
  1901                           	opt stack 28
  1902                           
  1903                           ;lcd.c: 9: PORTD = 0;
  1904                           
  1905                           ;incstack = 0
  1906  001752  0E00               	movlw	0
  1907  001754  6E83               	movwf	3971,c	;volatile
  1908                           
  1909                           ;lcd.c: 11: TRISD = 0x00;
  1910  001756  0E00               	movlw	0
  1911  001758  6E95               	movwf	3989,c	;volatile
  1912                           
  1913                           ;lcd.c: 14: PORTDbits.RD7 = 1;
  1914  00175A  8E83               	bsf	3971,7,c	;volatile
  1915                           
  1916                           ;lcd.c: 17: _delay((unsigned long)((15)*(8e6/4000.0)));
  1917  00175C  0E27               	movlw	39
  1918  00175E  6E05               	movwf	??_LCD_Initialize& (0+255),c
  1919  001760  0EF5               	movlw	245
  1920  001762                     u757:
  1921  001762  2EE8               	decfsz	wreg,f,c
  1922  001764  D7FE               	goto	u757
  1923  001766  2E05               	decfsz	??_LCD_Initialize& (0+255),f,c
  1924  001768  D7FC               	goto	u757
  1925  00176A  F000               	nop	
  1926                           
  1927                           ;lcd.c: 20: LCDPutCmd(0x32);
  1928  00176C  0E32               	movlw	50
  1929  00176E  ECC6  F00B         	call	_LCDPutCmd
  1930                           
  1931                           ;lcd.c: 23: LCDPutCmd(0x28);
  1932  001772  0E28               	movlw	40
  1933  001774  ECC6  F00B         	call	_LCDPutCmd
  1934                           
  1935                           ;lcd.c: 26: LCDPutCmd(0x0C);
  1936  001778  0E0C               	movlw	12
  1937  00177A  ECC6  F00B         	call	_LCDPutCmd
  1938                           
  1939                           ;lcd.c: 28: LCDPutCmd(0x01);
  1940  00177E  0E01               	movlw	1
  1941  001780  ECC6  F00B         	call	_LCDPutCmd
  1942                           
  1943                           ;lcd.c: 31: LCDPutCmd(0x06);
  1944  001784  0E06               	movlw	6
  1945  001786  ECC6  F00B         	call	_LCDPutCmd
  1946  00178A  0012               	return		;funcret
  1947  00178C                     __end_of_LCD_Initialize:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           indf2	equ	0xFDF
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _LCDPutStr *****************
  1961 ;; Defined at:
  1962 ;;		line 95 in file "lcd.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  str             2    4[COMRAM] PTR const unsigned char 
  1965 ;;		 -> out(16), 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  i               1    6[COMRAM] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;Total ram usage:        3 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    2
  1984 ;; This function calls:
  1985 ;;		_LCDPutChar
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text6
  1992  0017C6                     __ptext6:
  1993                           	opt stack 0
  1994  0017C6                     _LCDPutStr:
  1995                           	opt stack 28
  1996                           
  1997                           ;lcd.c: 97: uint8_t i=0;
  1998                           
  1999                           ;incstack = 0
  2000  0017C6  0E00               	movlw	0
  2001  0017C8  6E07               	movwf	LCDPutStr@i,c
  2002                           
  2003                           ;lcd.c: 100: while (str[i])
  2004  0017CA  D00D               	goto	l1377
  2005  0017CC                     l1373:
  2006                           
  2007                           ;lcd.c: 101: {
  2008                           ;lcd.c: 103: LCDPutChar(str[i++]);
  2009  0017CC  5007               	movf	LCDPutStr@i,w,c
  2010  0017CE  0D01               	mullw	1
  2011  0017D0  50F3               	movf	prodl,w,c
  2012  0017D2  2405               	addwf	LCDPutStr@str,w,c
  2013  0017D4  6ED9               	movwf	fsr2l,c
  2014  0017D6  50F4               	movf	prodh,w,c
  2015  0017D8  2006               	addwfc	LCDPutStr@str+1,w,c
  2016  0017DA  6EDA               	movwf	fsr2h,c
  2017  0017DC  50DF               	movf	indf2,w,c
  2018  0017DE  ECFF  F00B         	call	_LCDPutChar
  2019  0017E2  2A07               	incf	LCDPutStr@i,f,c
  2020  0017E4  D000               	goto	l1377
  2021  0017E6                     l1377:
  2022  0017E6  5007               	movf	LCDPutStr@i,w,c
  2023  0017E8  0D01               	mullw	1
  2024  0017EA  50F3               	movf	prodl,w,c
  2025  0017EC  2405               	addwf	LCDPutStr@str,w,c
  2026  0017EE  6ED9               	movwf	fsr2l,c
  2027  0017F0  50F4               	movf	prodh,w,c
  2028  0017F2  2006               	addwfc	LCDPutStr@str+1,w,c
  2029  0017F4  6EDA               	movwf	fsr2h,c
  2030  0017F6  50DF               	movf	indf2,w,c
  2031  0017F8  A4D8               	btfss	status,2,c
  2032  0017FA  D7E8               	goto	l1373
  2033  0017FC  0012               	return		;funcret
  2034  0017FE                     __end_of_LCDPutStr:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           prodh	equ	0xFF4
  2041                           prodl	equ	0xFF3
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _LCDPutChar *****************
  2050 ;; Defined at:
  2051 ;;		line 63 in file "lcd.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  ch              1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  ch              1    3[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;		None               void
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        2 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    1
  2072 ;; This function calls:
  2073 ;;		_LCDWriteNibble
  2074 ;; This function is called by:
  2075 ;;		_LCDPutStr
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text7
  2080  0017FE                     __ptext7:
  2081                           	opt stack 0
  2082  0017FE                     _LCDPutChar:
  2083                           	opt stack 28
  2084                           
  2085                           ;incstack = 0
  2086                           ;LCDPutChar@ch stored from wreg
  2087  0017FE  6E04               	movwf	LCDPutChar@ch,c
  2088                           
  2089                           ;lcd.c: 65: _delay((unsigned long)((5)*(8e6/4000.0)));
  2090  001800  0E0D               	movlw	13
  2091  001802  6E03               	movwf	??_LCDPutChar& (0+255),c
  2092  001804  0EFC               	movlw	252
  2093  001806                     u767:
  2094  001806  2EE8               	decfsz	wreg,f,c
  2095  001808  D7FE               	goto	u767
  2096  00180A  2E03               	decfsz	??_LCDPutChar& (0+255),f,c
  2097  00180C  D7FC               	goto	u767
  2098                           
  2099                           ;lcd.c: 68: LCDWriteNibble(ch,1);
  2100  00180E  0E01               	movlw	1
  2101  001810  6E01               	movwf	LCDWriteNibble@rs,c
  2102  001812  5004               	movf	LCDPutChar@ch,w,c
  2103  001814  EC15  F00C         	call	_LCDWriteNibble
  2104                           
  2105                           ;lcd.c: 71: ch = (ch << 4);
  2106  001818  3804               	swapf	LCDPutChar@ch,w,c
  2107  00181A  0BF0               	andlw	240
  2108  00181C  6E04               	movwf	LCDPutChar@ch,c
  2109                           
  2110                           ;lcd.c: 74: LCDWriteNibble(ch,1);
  2111  00181E  0E01               	movlw	1
  2112  001820  6E01               	movwf	LCDWriteNibble@rs,c
  2113  001822  5004               	movf	LCDPutChar@ch,w,c
  2114  001824  EC15  F00C         	call	_LCDWriteNibble
  2115  001828  0012               	return		;funcret
  2116  00182A                     __end_of_LCDPutChar:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf2	equ	0xFDF
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _LCDGoto *****************
  2132 ;; Defined at:
  2133 ;;		line 108 in file "lcd.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  pos             1    wreg     unsigned char 
  2136 ;;  ln              1    4[COMRAM] unsigned char 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  pos             1    9[COMRAM] unsigned char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        6 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    2
  2155 ;; This function calls:
  2156 ;;		_LCDPutCmd
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text8
  2163  001710                     __ptext8:
  2164                           	opt stack 0
  2165  001710                     _LCDGoto:
  2166                           	opt stack 28
  2167                           
  2168                           ;incstack = 0
  2169                           ;LCDGoto@pos stored from wreg
  2170  001710  6E0A               	movwf	LCDGoto@pos,c
  2171                           
  2172                           ;lcd.c: 111: if ((ln > (2-1)) || (pos > (16-1)))
  2173  001712  0E02               	movlw	2
  2174  001714  6005               	cpfslt	LCDGoto@ln,c
  2175  001716  D01C               	goto	l64
  2176  001718  0E0F               	movlw	15
  2177  00171A  640A               	cpfsgt	LCDGoto@pos,c
  2178  00171C  D001               	goto	l1383
  2179                           
  2180                           ;lcd.c: 112: {
  2181                           ;lcd.c: 114: return;
  2182  00171E  D018               	goto	l64
  2183  001720                     l1383:
  2184                           
  2185                           ;lcd.c: 115: }
  2186                           ;lcd.c: 118: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  2187  001720  0405               	decf	LCDGoto@ln,w,c
  2188  001722  B4D8               	btfsc	status,2,c
  2189  001724  D002               	goto	l1387
  2190  001726  0E80               	movlw	128
  2191  001728  D001               	goto	L11
  2192  00172A                     l1387:
  2193  00172A  0EC0               	movlw	192
  2194  00172C                     L11:
  2195  00172C  C00A  F006         	movff	LCDGoto@pos,??_LCDGoto
  2196  001730  6A07               	clrf	(??_LCDGoto+1)& (0+255),c
  2197  001732  1006               	iorwf	??_LCDGoto,w,c
  2198  001734  6E08               	movwf	_LCDGoto$165,c
  2199  001736  5007               	movf	??_LCDGoto+1,w,c
  2200  001738  6E09               	movwf	_LCDGoto$165+1,c
  2201  00173A  D000               	goto	l1389
  2202  00173C                     l1389:
  2203  00173C  5008               	movf	_LCDGoto$165,w,c
  2204  00173E  ECC6  F00B         	call	_LCDPutCmd
  2205                           
  2206                           ;lcd.c: 121: _delay((unsigned long)((5)*(8e6/4000.0)));
  2207  001742  0E0D               	movlw	13
  2208  001744  6E06               	movwf	??_LCDGoto& (0+255),c
  2209  001746  0EFC               	movlw	252
  2210  001748                     u777:
  2211  001748  2EE8               	decfsz	wreg,f,c
  2212  00174A  D7FE               	goto	u777
  2213  00174C  2E06               	decfsz	??_LCDGoto& (0+255),f,c
  2214  00174E  D7FC               	goto	u777
  2215  001750                     l64:
  2216  001750  0012               	return		;funcret
  2217  001752                     __end_of_LCDGoto:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           prodh	equ	0xFF4
  2224                           prodl	equ	0xFF3
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           indf2	equ	0xFDF
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _LCDPutCmd *****************
  2233 ;; Defined at:
  2234 ;;		line 78 in file "lcd.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  ch              1    wreg     unsigned char 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  ch              1    3[COMRAM] unsigned char 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;		None               void
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;Total ram usage:        2 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    1
  2255 ;; This function calls:
  2256 ;;		_LCDWriteNibble
  2257 ;; This function is called by:
  2258 ;;		_LCD_Initialize
  2259 ;;		_LCDGoto
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text9
  2265  00178C                     __ptext9:
  2266                           	opt stack 0
  2267  00178C                     _LCDPutCmd:
  2268                           	opt stack 28
  2269                           
  2270                           ;incstack = 0
  2271                           ;LCDPutCmd@ch stored from wreg
  2272  00178C  6E04               	movwf	LCDPutCmd@ch,c
  2273                           
  2274                           ;lcd.c: 80: _delay((unsigned long)((5)*(8e6/4000.0)));
  2275  00178E  0E0D               	movlw	13
  2276  001790  6E03               	movwf	??_LCDPutCmd& (0+255),c
  2277  001792  0EFC               	movlw	252
  2278  001794                     u787:
  2279  001794  2EE8               	decfsz	wreg,f,c
  2280  001796  D7FE               	goto	u787
  2281  001798  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
  2282  00179A  D7FC               	goto	u787
  2283                           
  2284                           ;lcd.c: 83: LCDWriteNibble(ch,0);
  2285  00179C  0E00               	movlw	0
  2286  00179E  6E01               	movwf	LCDWriteNibble@rs,c
  2287  0017A0  5004               	movf	LCDPutCmd@ch,w,c
  2288  0017A2  EC15  F00C         	call	_LCDWriteNibble
  2289                           
  2290                           ;lcd.c: 86: ch = (ch << 4);
  2291  0017A6  3804               	swapf	LCDPutCmd@ch,w,c
  2292  0017A8  0BF0               	andlw	240
  2293  0017AA  6E04               	movwf	LCDPutCmd@ch,c
  2294                           
  2295                           ;lcd.c: 88: _delay((unsigned long)((1)*(8e6/4000.0)));
  2296  0017AC  0E03               	movlw	3
  2297  0017AE  6E03               	movwf	??_LCDPutCmd& (0+255),c
  2298  0017B0  0E98               	movlw	152
  2299  0017B2                     u797:
  2300  0017B2  2EE8               	decfsz	wreg,f,c
  2301  0017B4  D7FE               	goto	u797
  2302  0017B6  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
  2303  0017B8  D7FC               	goto	u797
  2304                           
  2305                           ;lcd.c: 91: LCDWriteNibble(ch,0);
  2306  0017BA  0E00               	movlw	0
  2307  0017BC  6E01               	movwf	LCDWriteNibble@rs,c
  2308  0017BE  5004               	movf	LCDPutCmd@ch,w,c
  2309  0017C0  EC15  F00C         	call	_LCDWriteNibble
  2310  0017C4  0012               	return		;funcret
  2311  0017C6                     __end_of_LCDPutCmd:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           tblptrh	equ	0xFF7
  2315                           tblptrl	equ	0xFF6
  2316                           tablat	equ	0xFF5
  2317                           prodh	equ	0xFF4
  2318                           prodl	equ	0xFF3
  2319                           postinc0	equ	0xFEE
  2320                           wreg	equ	0xFE8
  2321                           indf2	equ	0xFDF
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _LCDWriteNibble *****************
  2327 ;; Defined at:
  2328 ;;		line 36 in file "lcd.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  ch              1    wreg     unsigned char 
  2331 ;;  rs              1    0[COMRAM] unsigned char 
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  ch              1    1[COMRAM] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;		None               void
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2343 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;Total ram usage:        2 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_LCDPutChar
  2353 ;;		_LCDPutCmd
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text10
  2358  00182A                     __ptext10:
  2359                           	opt stack 0
  2360  00182A                     _LCDWriteNibble:
  2361                           	opt stack 28
  2362                           
  2363                           ;incstack = 0
  2364                           ;LCDWriteNibble@ch stored from wreg
  2365  00182A  6E02               	movwf	LCDWriteNibble@ch,c
  2366                           
  2367                           ;lcd.c: 39: ch = (ch >> 4);
  2368  00182C  3802               	swapf	LCDWriteNibble@ch,w,c
  2369  00182E  0B0F               	andlw	15
  2370  001830  6E02               	movwf	LCDWriteNibble@ch,c
  2371                           
  2372                           ;lcd.c: 42: ch = (ch & 0x0F);
  2373  001832  5002               	movf	LCDWriteNibble@ch,w,c
  2374  001834  0B0F               	andlw	15
  2375  001836  6E02               	movwf	LCDWriteNibble@ch,c
  2376                           
  2377                           ;lcd.c: 45: PORTD = (PORTD & 0xF0);
  2378  001838  5083               	movf	3971,w,c	;volatile
  2379  00183A  0BF0               	andlw	240
  2380  00183C  6E83               	movwf	3971,c	;volatile
  2381                           
  2382                           ;lcd.c: 48: PORTD = (PORTD | ch);
  2383  00183E  5083               	movf	3971,w,c	;volatile
  2384  001840  1002               	iorwf	LCDWriteNibble@ch,w,c
  2385  001842  6E83               	movwf	3971,c	;volatile
  2386                           
  2387                           ;lcd.c: 51: PORTDbits.RD4 = rs;
  2388  001844  B001               	btfsc	LCDWriteNibble@rs,0,c
  2389  001846  D002               	bra	u385
  2390  001848  9883               	bcf	3971,4,c	;volatile
  2391  00184A  D001               	bra	u386
  2392  00184C                     u385:
  2393  00184C  8883               	bsf	3971,4,c	;volatile
  2394  00184E                     u386:
  2395                           
  2396                           ;lcd.c: 54: PORTDbits.RD5 = 0;
  2397  00184E  9A83               	bcf	3971,5,c	;volatile
  2398                           
  2399                           ;lcd.c: 57: PORTDbits.RD6 = 1;
  2400  001850  8C83               	bsf	3971,6,c	;volatile
  2401                           
  2402                           ;lcd.c: 60: PORTDbits.RD6 = 0;
  2403  001852  9C83               	bcf	3971,6,c	;volatile
  2404  001854  0012               	return		;funcret
  2405  001856                     __end_of_LCDWriteNibble:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           indf2	equ	0xFDF
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _EEPROM_write *****************
  2421 ;; Defined at:
  2422 ;;		line 5 in file "eeprom_lib.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  data            1    wreg     unsigned char 
  2425 ;;  address         1    0[COMRAM] unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  data            1    1[COMRAM] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;		None               void
  2430 ;; Registers used:
  2431 ;;		wreg, status,2
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2437 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text11
  2451  001856                     __ptext11:
  2452                           	opt stack 0
  2453  001856                     _EEPROM_write:
  2454                           	opt stack 30
  2455                           
  2456                           ;incstack = 0
  2457                           ;EEPROM_write@data stored from wreg
  2458  001856  6E02               	movwf	EEPROM_write@data,c
  2459                           
  2460                           ;eeprom_lib.c: 7: EEADRH = address >> 8;
  2461  001858  0E00               	movlw	0
  2462  00185A  6EAA               	movwf	4010,c	;volatile
  2463                           
  2464                           ;eeprom_lib.c: 8: EEADR = address;
  2465  00185C  C001  FFA9         	movff	EEPROM_write@address,4009	;volatile
  2466                           
  2467                           ;eeprom_lib.c: 9: EEDATA = data;
  2468  001860  C002  FFA8         	movff	EEPROM_write@data,4008	;volatile
  2469                           
  2470                           ;eeprom_lib.c: 10: EEPGD = 0;
  2471  001864  9EA6               	bcf	4006,7,c	;volatile
  2472                           
  2473                           ;eeprom_lib.c: 11: CFGS = 0;
  2474  001866  9CA6               	bcf	4006,6,c	;volatile
  2475                           
  2476                           ;eeprom_lib.c: 14: WREN = 1;
  2477  001868  84A6               	bsf	4006,2,c	;volatile
  2478                           
  2479                           ;eeprom_lib.c: 15: GIE = 0;
  2480  00186A  9EF2               	bcf	intcon,7,c	;volatile
  2481                           
  2482                           ;eeprom_lib.c: 17: EECON2 = 0X55;
  2483  00186C  0E55               	movlw	85
  2484  00186E  6EA7               	movwf	4007,c	;volatile
  2485                           
  2486                           ;eeprom_lib.c: 18: EECON2 = 0XAA;
  2487  001870  0EAA               	movlw	170
  2488  001872  6EA7               	movwf	4007,c	;volatile
  2489                           
  2490                           ;eeprom_lib.c: 20: EECON1bits.WR = 1;
  2491  001874  82A6               	bsf	4006,1,c	;volatile
  2492                           
  2493                           ;eeprom_lib.c: 21: while(EECON1bits.WR);
  2494  001876  D000               	goto	l21
  2495  001878                     l21:
  2496  001878  B2A6               	btfsc	4006,1,c	;volatile
  2497  00187A  D7FE               	goto	l21
  2498                           
  2499                           ;eeprom_lib.c: 22: GIE = 0;
  2500  00187C  9EF2               	bcf	intcon,7,c	;volatile
  2501                           
  2502                           ;eeprom_lib.c: 23: WREN = 0;
  2503  00187E  94A6               	bcf	4006,2,c	;volatile
  2504  001880  0012               	return		;funcret
  2505  001882                     __end_of_EEPROM_write:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           intcon	equ	0xFF2
  2514                           postinc0	equ	0xFEE
  2515                           wreg	equ	0xFE8
  2516                           indf2	equ	0xFDF
  2517                           fsr2h	equ	0xFDA
  2518                           fsr2l	equ	0xFD9
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _EEPROM_read *****************
  2522 ;; Defined at:
  2523 ;;		line 27 in file "eeprom_lib.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  address         1    wreg     unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  address         1    0[COMRAM] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      unsigned char 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;Total ram usage:        1 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text12
  2551  001882                     __ptext12:
  2552                           	opt stack 0
  2553  001882                     _EEPROM_read:
  2554                           	opt stack 30
  2555                           
  2556                           ;incstack = 0
  2557                           ;EEPROM_read@address stored from wreg
  2558  001882  6E01               	movwf	EEPROM_read@address,c
  2559                           
  2560                           ;eeprom_lib.c: 29: EEADRH = address >> 8;
  2561  001884  0E00               	movlw	0
  2562  001886  6EAA               	movwf	4010,c	;volatile
  2563                           
  2564                           ;eeprom_lib.c: 30: EEADR = address;
  2565  001888  C001  FFA9         	movff	EEPROM_read@address,4009	;volatile
  2566                           
  2567                           ;eeprom_lib.c: 31: EEPGD = 0;
  2568  00188C  9EA6               	bcf	4006,7,c	;volatile
  2569                           
  2570                           ;eeprom_lib.c: 32: CFGS = 0;
  2571  00188E  9CA6               	bcf	4006,6,c	;volatile
  2572                           
  2573                           ;eeprom_lib.c: 33: EECON1bits.RD= 1;
  2574  001890  80A6               	bsf	4006,0,c	;volatile
  2575                           
  2576                           ;eeprom_lib.c: 34: while(EECON1bits.RD);
  2577  001892  D000               	goto	l27
  2578  001894                     l27:
  2579  001894  B0A6               	btfsc	4006,0,c	;volatile
  2580  001896  D7FE               	goto	l27
  2581                           
  2582                           ;eeprom_lib.c: 35: return EEDATA;
  2583  001898  50A8               	movf	4008,w,c	;volatile
  2584  00189A  0012               	return		;funcret
  2585  00189C                     __end_of_EEPROM_read:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           intcon	equ	0xFF2
  2594                           postinc0	equ	0xFEE
  2595                           wreg	equ	0xFE8
  2596                           indf2	equ	0xFDF
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           wreg	equ	0xFE8
  2609                           indf2	equ	0xFDF
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           status	equ	0xFD8
  2613                           
  2614                           	psect	rparam
  2615  0000                     tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           intcon	equ	0xFF2
  2622                           postinc0	equ	0xFEE
  2623                           wreg	equ	0xFE8
  2624                           indf2	equ	0xFDF
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8


Data Sizes:
    Strings     134
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      57
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> main@pass(COMRAM[5]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> main@str(COMRAM[5]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_12(CODE[14]), STR_11(CODE[6]), STR_10(CODE[6]), STR_9(CODE[13]), 
		 -> STR_8(CODE[6]), STR_7(CODE[5]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> out(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 16
		 -> out(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_LCDGoto
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0    7134
                                             10 COMRAM    31    31      0
                        _EEPROM_read
                       _EEPROM_write
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                         _UART_initi
                       _UART_read_ch
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     347
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    16      4    1627
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_read_ch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_initi                                           4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     413
                                              4 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     1      2    1271
                                              4 COMRAM     3     1      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     413
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1    1315
                                              4 COMRAM     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     413
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_write                                         2     1      1     556
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_read                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_read
   _EEPROM_write
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _UART_initi
   _UART_read_ch
   _sprintf
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      39       1       44.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      34        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 21 10:42:18 2022

         _LCD_Initialize 1752                       l21 1878                       l27 1894  
            ?_LCDPutChar 0001                       l64 1750              __CFG_BORV$3 000000  
     EEPROM_read@address 0001             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l130 18B6  
                    l210 1506                      l115 167C                      l212 1576  
                    l133 18BE                      l206 1488                      l225 170E  
                    l781 16CA                      _GIE 007F97             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      u620 1488                      u385 184C  
                    u386 184E                      u650 1506                      u570 1390  
                    u490 11A8                      u707 114E                      u580 13AE  
                    u717 1398                      u670 1576                      u727 1472  
                    u737 14F0                      u747 1560                      u757 1762  
                    u767 1806                      u777 1748                      u787 1794  
                    u797 17B2                      _TX9 007D66                      _out 002A  
                    wreg 000FE8             __CFG_LVP$OFF 000000          __end_of_LCDGoto 1752  
           __CFG_WDT$OFF 000000                     l1401 1602                     l1403 1606  
                   l1405 160A                     l1511 115E                     l1503 1134  
                   l1409 1610                     l1441 16E8                     l1451 168A  
                   l1523 11AA                     l1507 1148                     l1373 17CC  
                   l1437 16D6                     l1613 13B2                     l1383 1720  
                   l1455 16BE                     l1607 1392                     l1623 13FA  
                   l1377 17E6                     l1449 1680                     l1705 15B0  
                   l1625 13FC                     l1553 1278                     l1387 172A  
                   l1395 15F6                     l1715 15DE                     l1651 148C  
                   l1619 13EA                     l1389 173C                     l1741 1640  
                   l1397 15FA                     l1709 15C4                     l1573 12EC  
                   l1549 1264                     l1751 1672                     l1743 164A  
                   l1399 15FE                     l1647 146C                     l1583 131A  
                   l1559 1292                     l1745 1654                     l1577 1300  
                   l1747 165E                     l1675 14EA                     l1749 1668  
                   l1693 155A                     l1679 150C                     _CFGS 007D36  
                   STR_1 106B                     STR_2 1023                     STR_3 1001  
                   STR_4 1012                     STR_5 1032                     STR_6 1041  
                   STR_7 1082                     STR_8 107C                     STR_9 105E  
                   _BRGH 007D62                     _CREN 007D5C                     _IPEN 007E87  
                   _PEIE 007F96                     _RCIE 007CED                     _RCIF 007CF5  
                   _SPEN 007D5F                     _TRMT 007D61                     _TXIE 007CEC  
                   _WREN 007D32                     _TXIF 007CF4                     _TXEN 007D65  
                   _SYNC 007D64                     _main 1088                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9       __size_of_LCDPutCmd 003A  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
     __size_of_LCDPutStr 0038            __CFG_IESO$OFF 000000   __end_of_LCD_Initialize 178C  
          __CFG_MCLRE$ON 000000             ___param_bank 000010              LCDPutCmd@ch 0004  
   __end_of_EEPROM_write 1882                    ?_main 0001                    _EEADR 000FA9  
                  STR_10 1076                    STR_11 1076                    STR_12 1050  
                  _BRG16 007DC3                    _EEPGD 007D37                    _LATB0 007C50  
                  _LATB1 007C51                    _LATB2 007C52                    _RCREG 000FAE  
                  _SPBRG 000FAF                    _PORTD 000F83                    _TRISD 000F95  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
            ?_UART_initi 0001                    main@c 000C                    main@i 0022  
                  main@j 000D                    main@x 001C                    tablat 000FF5  
    __size_of_LCDPutChar 002C                    status 000FD8          __end_of_sprintf 1710  
        ?_LCD_Initialize 0001     __size_of_EEPROM_read 001A          __initialization 189C  
           __end_of_main 15EA                   ??_main 000B            __activetblptr 000002  
              ??_LCDGoto 0006        __end_of_LCDPutCmd 17C6             LCDPutChar@ch 0004  
      __end_of_LCDPutStr 17FE      EEPROM_write@address 0001                   _EEADRH 000FAA  
                 _EEDATA 000FA8                   _EECON2 000FA7                   _OSCCON 000FD3  
           LCDPutStr@str 0005                   _TRISB0 007C98                   _TRISB1 007C99  
                 _TRISB2 007C9A           _LCDWriteNibble 182A           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000      __size_of_UART_initi 0094                   clear_0 18A2  
                 _strcmp 167E             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0005  
 __end_of_LCDWriteNibble 1856               __accesstop 0080  __end_of__initialization 18A8  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001                LCDGoto@ln 0005  
         __pcstackCOMRAM 0001    __size_of_EEPROM_write 002C             ??_LCDPutChar 0003  
        ?_LCDWriteNibble 0001       __end_of_LCDPutChar 182A             _EEPROM_write 1856  
                ?_strcmp 0001                  _LCDGoto 1710             ??_UART_initi 0003  
       ??_LCD_Initialize 0005         EEPROM_write@data 0002                  __Hparam 0000  
                __Lparam 0000             __psmallconst 1000       __end_of_UART_initi 167E  
                __pcinit 189C                  __ramtop 1000            ?_UART_read_ch 0001  
                __ptext0 1088                  __ptext1 167E                  __ptext2 16CC  
                __ptext3 18B2                  __ptext4 15EA                  __ptext5 1752  
                __ptext6 17C6                  __ptext7 17FE                  __ptext8 1710  
                __ptext9 178C          __size_of_strcmp 004E                _LCDPutCmd 178C  
                _sprintf 16CC                _LCDPutStr 17C6                  main@str 0017  
   end_of_initialization 18A8            __Lmediumconst 0000            ??_EEPROM_read 0001  
                postinc0 000FEE                  strcmp@r 0006           ??_UART_read_ch 0001  
              _PORTDbits 000F83               ?_LCDPutCmd 0001               ?_LCDPutStr 0005  
             LCDGoto@pos 000A      __end_of_EEPROM_read 189C               LCDPutStr@i 0007  
         __end_of_strcmp 16CC      start_initialization 189C         ??_LCDWriteNibble 0002  
       __CFG_OSC$INTIO67 000000         __CFG_LPT1OSC$OFF 000000                 ??_strcmp 0005  
               ?_LCDGoto 0005              __pbssCOMRAM 002A              ??_LCDPutCmd 0003  
            ??_LCDPutStr 0007     __end_of_UART_read_ch 18C0              _EEPROM_read 1882  
      __CFG_CCP2MX$PORTC 000000         LCDWriteNibble@ch 0002         LCDWriteNibble@rs 0001  
            __smallconst 1000                 ?_sprintf 0001              _LCDGoto$165 0008  
       __CFG_WDTPS$32768 000000                main@i_260 0028                main@i_247 0024  
              main@i_249 0026                main@j_251 000F                main@j_254 0011  
              main@j_256 0013                main@j_258 0015         __size_of_LCDGoto 0042  
             _EECON1bits 000FA6                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000  __size_of_LCD_Initialize 003A                 __ptext10 182A  
               __ptext11 1856                 __ptext12 1882    __size_of_UART_read_ch 000E  
       __size_of_sprintf 0044            ?_EEPROM_write 0001            __size_of_main 0562  
             _LCDPutChar 17FE                 main@pass 001D             _UART_read_ch 18B2  
           UART_initi@BR 0001                sprintf@ap 0005                sprintf@sp 0001  
         ??_EEPROM_write 0002             ?_EEPROM_read 0001                 sprintf@c 0007  
               sprintf@f 0003                 strcmp@s1 0001                 strcmp@s2 0003  
             _UART_initi 15EA  __size_of_LCDWriteNibble 002C  
